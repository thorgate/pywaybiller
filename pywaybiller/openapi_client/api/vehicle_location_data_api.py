# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from pywaybiller.openapi_client.models.vehicle_location_data_list200_response import (
    VehicleLocationDataList200Response,
)

from pywaybiller.openapi_client.api_client import ApiClient
from pywaybiller.openapi_client.api_response import ApiResponse
from pywaybiller.openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class VehicleLocationDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def vehicle_location_data_list(
        self,
        dispatcher_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__lte")
        ] = None,
        dispatcher_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__gte")
        ] = None,
        dispatcher_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__lt")
        ] = None,
        dispatcher_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__gt")
        ] = None,
        dispatcher_timestamp: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp")
        ] = None,
        dispatcher_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__isnull")
        ] = None,
        driver_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__lte")
        ] = None,
        driver_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__gte")
        ] = None,
        driver_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__lt")
        ] = None,
        driver_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__gt")
        ] = None,
        driver_timestamp: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp")
        ] = None,
        driver_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__isnull")
        ] = None,
        confirmed_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__lte")
        ] = None,
        confirmed_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__gte")
        ] = None,
        confirmed_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__lt")
        ] = None,
        confirmed_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__gt")
        ] = None,
        confirmed_timestamp: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp")
        ] = None,
        confirmed_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__isnull")
        ] = None,
        cancelled_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__lte")
        ] = None,
        cancelled_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__gte")
        ] = None,
        cancelled_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__lt")
        ] = None,
        cancelled_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__gt")
        ] = None,
        cancelled_timestamp: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp")
        ] = None,
        cancelled_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__isnull")
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        waybill_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters available vehicle location data by waybill number."
            ),
        ] = None,
        truck_reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters available vehicle location data by truck registration number."
            ),
        ] = None,
        waybill_status: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters available vehicle location data by waybill status."
            ),
        ] = None,
        destination_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters available vehicle location data by destination ID."
            ),
        ] = None,
        **kwargs
    ) -> VehicleLocationDataList200Response:  # noqa: E501
        """Querying of vehicle location data  # noqa: E501

        Returns all vehicle location data for waybills associated with your company, according to the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vehicle_location_data_list(dispatcher_timestamp__lte, dispatcher_timestamp__gte, dispatcher_timestamp__lt, dispatcher_timestamp__gt, dispatcher_timestamp, dispatcher_timestamp__isnull, driver_timestamp__lte, driver_timestamp__gte, driver_timestamp__lt, driver_timestamp__gt, driver_timestamp, driver_timestamp__isnull, confirmed_timestamp__lte, confirmed_timestamp__gte, confirmed_timestamp__lt, confirmed_timestamp__gt, confirmed_timestamp, confirmed_timestamp__isnull, cancelled_timestamp__lte, cancelled_timestamp__gte, cancelled_timestamp__lt, cancelled_timestamp__gt, cancelled_timestamp, cancelled_timestamp__isnull, limit, offset, waybill_number, truck_reg_number, waybill_status, destination_id, async_req=True)
        >>> result = thread.get()

        :param dispatcher_timestamp__lte: dispatcher_timestamp__lte
        :type dispatcher_timestamp__lte: str
        :param dispatcher_timestamp__gte: dispatcher_timestamp__gte
        :type dispatcher_timestamp__gte: str
        :param dispatcher_timestamp__lt: dispatcher_timestamp__lt
        :type dispatcher_timestamp__lt: str
        :param dispatcher_timestamp__gt: dispatcher_timestamp__gt
        :type dispatcher_timestamp__gt: str
        :param dispatcher_timestamp: dispatcher_timestamp
        :type dispatcher_timestamp: str
        :param dispatcher_timestamp__isnull: dispatcher_timestamp__isnull
        :type dispatcher_timestamp__isnull: str
        :param driver_timestamp__lte: driver_timestamp__lte
        :type driver_timestamp__lte: str
        :param driver_timestamp__gte: driver_timestamp__gte
        :type driver_timestamp__gte: str
        :param driver_timestamp__lt: driver_timestamp__lt
        :type driver_timestamp__lt: str
        :param driver_timestamp__gt: driver_timestamp__gt
        :type driver_timestamp__gt: str
        :param driver_timestamp: driver_timestamp
        :type driver_timestamp: str
        :param driver_timestamp__isnull: driver_timestamp__isnull
        :type driver_timestamp__isnull: str
        :param confirmed_timestamp__lte: confirmed_timestamp__lte
        :type confirmed_timestamp__lte: str
        :param confirmed_timestamp__gte: confirmed_timestamp__gte
        :type confirmed_timestamp__gte: str
        :param confirmed_timestamp__lt: confirmed_timestamp__lt
        :type confirmed_timestamp__lt: str
        :param confirmed_timestamp__gt: confirmed_timestamp__gt
        :type confirmed_timestamp__gt: str
        :param confirmed_timestamp: confirmed_timestamp
        :type confirmed_timestamp: str
        :param confirmed_timestamp__isnull: confirmed_timestamp__isnull
        :type confirmed_timestamp__isnull: str
        :param cancelled_timestamp__lte: cancelled_timestamp__lte
        :type cancelled_timestamp__lte: str
        :param cancelled_timestamp__gte: cancelled_timestamp__gte
        :type cancelled_timestamp__gte: str
        :param cancelled_timestamp__lt: cancelled_timestamp__lt
        :type cancelled_timestamp__lt: str
        :param cancelled_timestamp__gt: cancelled_timestamp__gt
        :type cancelled_timestamp__gt: str
        :param cancelled_timestamp: cancelled_timestamp
        :type cancelled_timestamp: str
        :param cancelled_timestamp__isnull: cancelled_timestamp__isnull
        :type cancelled_timestamp__isnull: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param waybill_number: Filters available vehicle location data by waybill number.
        :type waybill_number: str
        :param truck_reg_number: Filters available vehicle location data by truck registration number.
        :type truck_reg_number: str
        :param waybill_status: Filters available vehicle location data by waybill status.
        :type waybill_status: int
        :param destination_id: Filters available vehicle location data by destination ID.
        :type destination_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VehicleLocationDataList200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the vehicle_location_data_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.vehicle_location_data_list_with_http_info(
            dispatcher_timestamp__lte,
            dispatcher_timestamp__gte,
            dispatcher_timestamp__lt,
            dispatcher_timestamp__gt,
            dispatcher_timestamp,
            dispatcher_timestamp__isnull,
            driver_timestamp__lte,
            driver_timestamp__gte,
            driver_timestamp__lt,
            driver_timestamp__gt,
            driver_timestamp,
            driver_timestamp__isnull,
            confirmed_timestamp__lte,
            confirmed_timestamp__gte,
            confirmed_timestamp__lt,
            confirmed_timestamp__gt,
            confirmed_timestamp,
            confirmed_timestamp__isnull,
            cancelled_timestamp__lte,
            cancelled_timestamp__gte,
            cancelled_timestamp__lt,
            cancelled_timestamp__gt,
            cancelled_timestamp,
            cancelled_timestamp__isnull,
            limit,
            offset,
            waybill_number,
            truck_reg_number,
            waybill_status,
            destination_id,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def vehicle_location_data_list_with_http_info(
        self,
        dispatcher_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__lte")
        ] = None,
        dispatcher_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__gte")
        ] = None,
        dispatcher_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__lt")
        ] = None,
        dispatcher_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__gt")
        ] = None,
        dispatcher_timestamp: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp")
        ] = None,
        dispatcher_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="dispatcher_timestamp__isnull")
        ] = None,
        driver_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__lte")
        ] = None,
        driver_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__gte")
        ] = None,
        driver_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__lt")
        ] = None,
        driver_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__gt")
        ] = None,
        driver_timestamp: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp")
        ] = None,
        driver_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="driver_timestamp__isnull")
        ] = None,
        confirmed_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__lte")
        ] = None,
        confirmed_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__gte")
        ] = None,
        confirmed_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__lt")
        ] = None,
        confirmed_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__gt")
        ] = None,
        confirmed_timestamp: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp")
        ] = None,
        confirmed_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="confirmed_timestamp__isnull")
        ] = None,
        cancelled_timestamp__lte: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__lte")
        ] = None,
        cancelled_timestamp__gte: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__gte")
        ] = None,
        cancelled_timestamp__lt: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__lt")
        ] = None,
        cancelled_timestamp__gt: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__gt")
        ] = None,
        cancelled_timestamp: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp")
        ] = None,
        cancelled_timestamp__isnull: Annotated[
            Optional[StrictStr], Field(description="cancelled_timestamp__isnull")
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        waybill_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters available vehicle location data by waybill number."
            ),
        ] = None,
        truck_reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters available vehicle location data by truck registration number."
            ),
        ] = None,
        waybill_status: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters available vehicle location data by waybill status."
            ),
        ] = None,
        destination_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters available vehicle location data by destination ID."
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of vehicle location data  # noqa: E501

        Returns all vehicle location data for waybills associated with your company, according to the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vehicle_location_data_list_with_http_info(dispatcher_timestamp__lte, dispatcher_timestamp__gte, dispatcher_timestamp__lt, dispatcher_timestamp__gt, dispatcher_timestamp, dispatcher_timestamp__isnull, driver_timestamp__lte, driver_timestamp__gte, driver_timestamp__lt, driver_timestamp__gt, driver_timestamp, driver_timestamp__isnull, confirmed_timestamp__lte, confirmed_timestamp__gte, confirmed_timestamp__lt, confirmed_timestamp__gt, confirmed_timestamp, confirmed_timestamp__isnull, cancelled_timestamp__lte, cancelled_timestamp__gte, cancelled_timestamp__lt, cancelled_timestamp__gt, cancelled_timestamp, cancelled_timestamp__isnull, limit, offset, waybill_number, truck_reg_number, waybill_status, destination_id, async_req=True)
        >>> result = thread.get()

        :param dispatcher_timestamp__lte: dispatcher_timestamp__lte
        :type dispatcher_timestamp__lte: str
        :param dispatcher_timestamp__gte: dispatcher_timestamp__gte
        :type dispatcher_timestamp__gte: str
        :param dispatcher_timestamp__lt: dispatcher_timestamp__lt
        :type dispatcher_timestamp__lt: str
        :param dispatcher_timestamp__gt: dispatcher_timestamp__gt
        :type dispatcher_timestamp__gt: str
        :param dispatcher_timestamp: dispatcher_timestamp
        :type dispatcher_timestamp: str
        :param dispatcher_timestamp__isnull: dispatcher_timestamp__isnull
        :type dispatcher_timestamp__isnull: str
        :param driver_timestamp__lte: driver_timestamp__lte
        :type driver_timestamp__lte: str
        :param driver_timestamp__gte: driver_timestamp__gte
        :type driver_timestamp__gte: str
        :param driver_timestamp__lt: driver_timestamp__lt
        :type driver_timestamp__lt: str
        :param driver_timestamp__gt: driver_timestamp__gt
        :type driver_timestamp__gt: str
        :param driver_timestamp: driver_timestamp
        :type driver_timestamp: str
        :param driver_timestamp__isnull: driver_timestamp__isnull
        :type driver_timestamp__isnull: str
        :param confirmed_timestamp__lte: confirmed_timestamp__lte
        :type confirmed_timestamp__lte: str
        :param confirmed_timestamp__gte: confirmed_timestamp__gte
        :type confirmed_timestamp__gte: str
        :param confirmed_timestamp__lt: confirmed_timestamp__lt
        :type confirmed_timestamp__lt: str
        :param confirmed_timestamp__gt: confirmed_timestamp__gt
        :type confirmed_timestamp__gt: str
        :param confirmed_timestamp: confirmed_timestamp
        :type confirmed_timestamp: str
        :param confirmed_timestamp__isnull: confirmed_timestamp__isnull
        :type confirmed_timestamp__isnull: str
        :param cancelled_timestamp__lte: cancelled_timestamp__lte
        :type cancelled_timestamp__lte: str
        :param cancelled_timestamp__gte: cancelled_timestamp__gte
        :type cancelled_timestamp__gte: str
        :param cancelled_timestamp__lt: cancelled_timestamp__lt
        :type cancelled_timestamp__lt: str
        :param cancelled_timestamp__gt: cancelled_timestamp__gt
        :type cancelled_timestamp__gt: str
        :param cancelled_timestamp: cancelled_timestamp
        :type cancelled_timestamp: str
        :param cancelled_timestamp__isnull: cancelled_timestamp__isnull
        :type cancelled_timestamp__isnull: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param waybill_number: Filters available vehicle location data by waybill number.
        :type waybill_number: str
        :param truck_reg_number: Filters available vehicle location data by truck registration number.
        :type truck_reg_number: str
        :param waybill_status: Filters available vehicle location data by waybill status.
        :type waybill_status: int
        :param destination_id: Filters available vehicle location data by destination ID.
        :type destination_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VehicleLocationDataList200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "dispatcher_timestamp__lte",
            "dispatcher_timestamp__gte",
            "dispatcher_timestamp__lt",
            "dispatcher_timestamp__gt",
            "dispatcher_timestamp",
            "dispatcher_timestamp__isnull",
            "driver_timestamp__lte",
            "driver_timestamp__gte",
            "driver_timestamp__lt",
            "driver_timestamp__gt",
            "driver_timestamp",
            "driver_timestamp__isnull",
            "confirmed_timestamp__lte",
            "confirmed_timestamp__gte",
            "confirmed_timestamp__lt",
            "confirmed_timestamp__gt",
            "confirmed_timestamp",
            "confirmed_timestamp__isnull",
            "cancelled_timestamp__lte",
            "cancelled_timestamp__gte",
            "cancelled_timestamp__lt",
            "cancelled_timestamp__gt",
            "cancelled_timestamp",
            "cancelled_timestamp__isnull",
            "limit",
            "offset",
            "waybill_number",
            "truck_reg_number",
            "waybill_status",
            "destination_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vehicle_location_data_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("dispatcher_timestamp__lte") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__lte", _params["dispatcher_timestamp__lte"])
            )

        if _params.get("dispatcher_timestamp__gte") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__gte", _params["dispatcher_timestamp__gte"])
            )

        if _params.get("dispatcher_timestamp__lt") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__lt", _params["dispatcher_timestamp__lt"])
            )

        if _params.get("dispatcher_timestamp__gt") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__gt", _params["dispatcher_timestamp__gt"])
            )

        if _params.get("dispatcher_timestamp") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp", _params["dispatcher_timestamp"])
            )

        if _params.get("dispatcher_timestamp__isnull") is not None:  # noqa: E501
            _query_params.append(
                (
                    "dispatcher_timestamp__isnull",
                    _params["dispatcher_timestamp__isnull"],
                )
            )

        if _params.get("driver_timestamp__lte") is not None:  # noqa: E501
            _query_params.append(
                ("driver_timestamp__lte", _params["driver_timestamp__lte"])
            )

        if _params.get("driver_timestamp__gte") is not None:  # noqa: E501
            _query_params.append(
                ("driver_timestamp__gte", _params["driver_timestamp__gte"])
            )

        if _params.get("driver_timestamp__lt") is not None:  # noqa: E501
            _query_params.append(
                ("driver_timestamp__lt", _params["driver_timestamp__lt"])
            )

        if _params.get("driver_timestamp__gt") is not None:  # noqa: E501
            _query_params.append(
                ("driver_timestamp__gt", _params["driver_timestamp__gt"])
            )

        if _params.get("driver_timestamp") is not None:  # noqa: E501
            _query_params.append(("driver_timestamp", _params["driver_timestamp"]))

        if _params.get("driver_timestamp__isnull") is not None:  # noqa: E501
            _query_params.append(
                ("driver_timestamp__isnull", _params["driver_timestamp__isnull"])
            )

        if _params.get("confirmed_timestamp__lte") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp__lte", _params["confirmed_timestamp__lte"])
            )

        if _params.get("confirmed_timestamp__gte") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp__gte", _params["confirmed_timestamp__gte"])
            )

        if _params.get("confirmed_timestamp__lt") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp__lt", _params["confirmed_timestamp__lt"])
            )

        if _params.get("confirmed_timestamp__gt") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp__gt", _params["confirmed_timestamp__gt"])
            )

        if _params.get("confirmed_timestamp") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp", _params["confirmed_timestamp"])
            )

        if _params.get("confirmed_timestamp__isnull") is not None:  # noqa: E501
            _query_params.append(
                ("confirmed_timestamp__isnull", _params["confirmed_timestamp__isnull"])
            )

        if _params.get("cancelled_timestamp__lte") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp__lte", _params["cancelled_timestamp__lte"])
            )

        if _params.get("cancelled_timestamp__gte") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp__gte", _params["cancelled_timestamp__gte"])
            )

        if _params.get("cancelled_timestamp__lt") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp__lt", _params["cancelled_timestamp__lt"])
            )

        if _params.get("cancelled_timestamp__gt") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp__gt", _params["cancelled_timestamp__gt"])
            )

        if _params.get("cancelled_timestamp") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp", _params["cancelled_timestamp"])
            )

        if _params.get("cancelled_timestamp__isnull") is not None:  # noqa: E501
            _query_params.append(
                ("cancelled_timestamp__isnull", _params["cancelled_timestamp__isnull"])
            )

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("waybill_number") is not None:  # noqa: E501
            _query_params.append(("waybill_number", _params["waybill_number"]))

        if _params.get("truck_reg_number") is not None:  # noqa: E501
            _query_params.append(("truck_reg_number", _params["truck_reg_number"]))

        if _params.get("waybill_status") is not None:  # noqa: E501
            _query_params.append(("waybill_status", _params["waybill_status"]))

        if _params.get("destination_id") is not None:  # noqa: E501
            _query_params.append(("destination_id", _params["destination_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "VehicleLocationDataList200Response",
        }

        return self.api_client.call_api(
            "/vehicle-location-data/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
