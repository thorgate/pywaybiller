# coding: utf-8

"""
Waybiller External API - with fixes

The **Waybiller External API** is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, the external API provides mapping support - it is possible to create company-specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during the creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, which may be null if the company doesn't have a mapping for this object.  Unique **Waybiller** identifiers and values can be accessed via the `raw_data` key.  The API is HTTPS and JSON based.  ### Pagination  By default, list endpoint responses are presented in pages of 30 items.  It is possible to control the page size using the `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>`, where `<number>` is an integer between 1 and 1000.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from pywaybiller.openapi_client.api_client import ApiClient, RequestSerialized
from pywaybiller.openapi_client.api_response import ApiResponse
from pywaybiller.openapi_client.models.paginated_external_api_vehicle_location_data_list import (
    PaginatedExternalAPIVehicleLocationDataList,
)
from pywaybiller.openapi_client.rest import RESTResponseType


class VehicleLocationDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def vehicle_location_data_list(
        self,
        cancelled_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified cancellation timestamp"
            ),
        ] = None,
        cancelled_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than specified value"
            ),
        ] = None,
        cancelled_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        cancelled_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is null or not null"
            ),
        ] = None,
        cancelled_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than specified value"
            ),
        ] = None,
        cancelled_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified confirmation timestamp"
            ),
        ] = None,
        confirmed_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than specified value"
            ),
        ] = None,
        confirmed_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is null or not null"
            ),
        ] = None,
        confirmed_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than specified value"
            ),
        ] = None,
        confirmed_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than or equal to specified value"
            ),
        ] = None,
        destination_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified destination ID"
            ),
        ] = None,
        dispatcher_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified dispatcher timestamp"
            ),
        ] = None,
        dispatcher_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than specified value"
            ),
        ] = None,
        dispatcher_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value"
            ),
        ] = None,
        dispatcher_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is null or not null"
            ),
        ] = None,
        dispatcher_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than specified value"
            ),
        ] = None,
        dispatcher_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than or equal to specified value"
            ),
        ] = None,
        driver_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified driver timestamp"
            ),
        ] = None,
        driver_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than specified value"
            ),
        ] = None,
        driver_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than or equal to specified value"
            ),
        ] = None,
        driver_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is null or not null"
            ),
        ] = None,
        driver_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than specified value"
            ),
        ] = None,
        driver_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than or equal to specified value"
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(description="Maximum number of objects to return per page"),
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="The initial index from which to return the results"),
        ] = None,
        truck_reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified truck registration number"
            ),
        ] = None,
        waybill_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified waybill number"
            ),
        ] = None,
        waybill_status: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified waybill status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedExternalAPIVehicleLocationDataList:
        """Querying of vehicle location data

        Returns all vehicle location data for waybills associated with your company, according to the specified filters.

        :param cancelled_timestamp: Filters vehicle location data by specified cancellation timestamp
        :type cancelled_timestamp: datetime
        :param cancelled_timestamp__gt: Filters vehicle location data where cancellation timestamp is greater than specified value
        :type cancelled_timestamp__gt: datetime
        :param cancelled_timestamp__gte: Filters vehicle location data where cancellation timestamp is greater than or equal to specified value
        :type cancelled_timestamp__gte: datetime
        :param cancelled_timestamp__isnull: Filters vehicle location data where cancellation timestamp is null or not null
        :type cancelled_timestamp__isnull: datetime
        :param cancelled_timestamp__lt: Filters vehicle location data where cancellation timestamp is less than specified value
        :type cancelled_timestamp__lt: datetime
        :param cancelled_timestamp__lte: Filters vehicle location data where cancellation timestamp is less than or equal to specified value
        :type cancelled_timestamp__lte: datetime
        :param confirmed_timestamp: Filters vehicle location data by specified confirmation timestamp
        :type confirmed_timestamp: datetime
        :param confirmed_timestamp__gt: Filters vehicle location data where confirmation timestamp is greater than specified value
        :type confirmed_timestamp__gt: datetime
        :param confirmed_timestamp__gte: Filters vehicle location data where confirmation timestamp is greater than or equal to specified value
        :type confirmed_timestamp__gte: datetime
        :param confirmed_timestamp__isnull: Filters vehicle location data where confirmation timestamp is null or not null
        :type confirmed_timestamp__isnull: datetime
        :param confirmed_timestamp__lt: Filters vehicle location data where confirmation timestamp is less than specified value
        :type confirmed_timestamp__lt: datetime
        :param confirmed_timestamp__lte: Filters vehicle location data where confirmation timestamp is less than or equal to specified value
        :type confirmed_timestamp__lte: datetime
        :param destination_id: Filters vehicle location data by specified destination ID
        :type destination_id: int
        :param dispatcher_timestamp: Filters vehicle location data by specified dispatcher timestamp
        :type dispatcher_timestamp: datetime
        :param dispatcher_timestamp__gt: Filters vehicle location data where dispatcher timestamp is greater than specified value
        :type dispatcher_timestamp__gt: datetime
        :param dispatcher_timestamp__gte: Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value
        :type dispatcher_timestamp__gte: datetime
        :param dispatcher_timestamp__isnull: Filters vehicle location data where dispatcher timestamp is null or not null
        :type dispatcher_timestamp__isnull: datetime
        :param dispatcher_timestamp__lt: Filters vehicle location data where dispatcher timestamp is less than specified value
        :type dispatcher_timestamp__lt: datetime
        :param dispatcher_timestamp__lte: Filters vehicle location data where dispatcher timestamp is less than or equal to specified value
        :type dispatcher_timestamp__lte: datetime
        :param driver_timestamp: Filters vehicle location data by specified driver timestamp
        :type driver_timestamp: datetime
        :param driver_timestamp__gt: Filters vehicle location data where driver timestamp is greater than specified value
        :type driver_timestamp__gt: datetime
        :param driver_timestamp__gte: Filters vehicle location data where driver timestamp is greater than or equal to specified value
        :type driver_timestamp__gte: datetime
        :param driver_timestamp__isnull: Filters vehicle location data where driver timestamp is null or not null
        :type driver_timestamp__isnull: datetime
        :param driver_timestamp__lt: Filters vehicle location data where driver timestamp is less than specified value
        :type driver_timestamp__lt: datetime
        :param driver_timestamp__lte: Filters vehicle location data where driver timestamp is less than or equal to specified value
        :type driver_timestamp__lte: datetime
        :param limit: Maximum number of objects to return per page
        :type limit: int
        :param offset: The initial index from which to return the results
        :type offset: int
        :param truck_reg_number: Filters vehicle location data by specified truck registration number
        :type truck_reg_number: str
        :param waybill_number: Filters vehicle location data by specified waybill number
        :type waybill_number: str
        :param waybill_status: Filters vehicle location data by specified waybill status
        :type waybill_status: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._vehicle_location_data_list_serialize(
            cancelled_timestamp=cancelled_timestamp,
            cancelled_timestamp__gt=cancelled_timestamp__gt,
            cancelled_timestamp__gte=cancelled_timestamp__gte,
            cancelled_timestamp__isnull=cancelled_timestamp__isnull,
            cancelled_timestamp__lt=cancelled_timestamp__lt,
            cancelled_timestamp__lte=cancelled_timestamp__lte,
            confirmed_timestamp=confirmed_timestamp,
            confirmed_timestamp__gt=confirmed_timestamp__gt,
            confirmed_timestamp__gte=confirmed_timestamp__gte,
            confirmed_timestamp__isnull=confirmed_timestamp__isnull,
            confirmed_timestamp__lt=confirmed_timestamp__lt,
            confirmed_timestamp__lte=confirmed_timestamp__lte,
            destination_id=destination_id,
            dispatcher_timestamp=dispatcher_timestamp,
            dispatcher_timestamp__gt=dispatcher_timestamp__gt,
            dispatcher_timestamp__gte=dispatcher_timestamp__gte,
            dispatcher_timestamp__isnull=dispatcher_timestamp__isnull,
            dispatcher_timestamp__lt=dispatcher_timestamp__lt,
            dispatcher_timestamp__lte=dispatcher_timestamp__lte,
            driver_timestamp=driver_timestamp,
            driver_timestamp__gt=driver_timestamp__gt,
            driver_timestamp__gte=driver_timestamp__gte,
            driver_timestamp__isnull=driver_timestamp__isnull,
            driver_timestamp__lt=driver_timestamp__lt,
            driver_timestamp__lte=driver_timestamp__lte,
            limit=limit,
            offset=offset,
            truck_reg_number=truck_reg_number,
            waybill_number=waybill_number,
            waybill_status=waybill_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PaginatedExternalAPIVehicleLocationDataList",
            "403": "DestinationsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def vehicle_location_data_list_with_http_info(
        self,
        cancelled_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified cancellation timestamp"
            ),
        ] = None,
        cancelled_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than specified value"
            ),
        ] = None,
        cancelled_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        cancelled_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is null or not null"
            ),
        ] = None,
        cancelled_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than specified value"
            ),
        ] = None,
        cancelled_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified confirmation timestamp"
            ),
        ] = None,
        confirmed_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than specified value"
            ),
        ] = None,
        confirmed_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is null or not null"
            ),
        ] = None,
        confirmed_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than specified value"
            ),
        ] = None,
        confirmed_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than or equal to specified value"
            ),
        ] = None,
        destination_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified destination ID"
            ),
        ] = None,
        dispatcher_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified dispatcher timestamp"
            ),
        ] = None,
        dispatcher_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than specified value"
            ),
        ] = None,
        dispatcher_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value"
            ),
        ] = None,
        dispatcher_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is null or not null"
            ),
        ] = None,
        dispatcher_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than specified value"
            ),
        ] = None,
        dispatcher_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than or equal to specified value"
            ),
        ] = None,
        driver_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified driver timestamp"
            ),
        ] = None,
        driver_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than specified value"
            ),
        ] = None,
        driver_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than or equal to specified value"
            ),
        ] = None,
        driver_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is null or not null"
            ),
        ] = None,
        driver_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than specified value"
            ),
        ] = None,
        driver_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than or equal to specified value"
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(description="Maximum number of objects to return per page"),
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="The initial index from which to return the results"),
        ] = None,
        truck_reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified truck registration number"
            ),
        ] = None,
        waybill_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified waybill number"
            ),
        ] = None,
        waybill_status: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified waybill status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedExternalAPIVehicleLocationDataList]:
        """Querying of vehicle location data

        Returns all vehicle location data for waybills associated with your company, according to the specified filters.

        :param cancelled_timestamp: Filters vehicle location data by specified cancellation timestamp
        :type cancelled_timestamp: datetime
        :param cancelled_timestamp__gt: Filters vehicle location data where cancellation timestamp is greater than specified value
        :type cancelled_timestamp__gt: datetime
        :param cancelled_timestamp__gte: Filters vehicle location data where cancellation timestamp is greater than or equal to specified value
        :type cancelled_timestamp__gte: datetime
        :param cancelled_timestamp__isnull: Filters vehicle location data where cancellation timestamp is null or not null
        :type cancelled_timestamp__isnull: datetime
        :param cancelled_timestamp__lt: Filters vehicle location data where cancellation timestamp is less than specified value
        :type cancelled_timestamp__lt: datetime
        :param cancelled_timestamp__lte: Filters vehicle location data where cancellation timestamp is less than or equal to specified value
        :type cancelled_timestamp__lte: datetime
        :param confirmed_timestamp: Filters vehicle location data by specified confirmation timestamp
        :type confirmed_timestamp: datetime
        :param confirmed_timestamp__gt: Filters vehicle location data where confirmation timestamp is greater than specified value
        :type confirmed_timestamp__gt: datetime
        :param confirmed_timestamp__gte: Filters vehicle location data where confirmation timestamp is greater than or equal to specified value
        :type confirmed_timestamp__gte: datetime
        :param confirmed_timestamp__isnull: Filters vehicle location data where confirmation timestamp is null or not null
        :type confirmed_timestamp__isnull: datetime
        :param confirmed_timestamp__lt: Filters vehicle location data where confirmation timestamp is less than specified value
        :type confirmed_timestamp__lt: datetime
        :param confirmed_timestamp__lte: Filters vehicle location data where confirmation timestamp is less than or equal to specified value
        :type confirmed_timestamp__lte: datetime
        :param destination_id: Filters vehicle location data by specified destination ID
        :type destination_id: int
        :param dispatcher_timestamp: Filters vehicle location data by specified dispatcher timestamp
        :type dispatcher_timestamp: datetime
        :param dispatcher_timestamp__gt: Filters vehicle location data where dispatcher timestamp is greater than specified value
        :type dispatcher_timestamp__gt: datetime
        :param dispatcher_timestamp__gte: Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value
        :type dispatcher_timestamp__gte: datetime
        :param dispatcher_timestamp__isnull: Filters vehicle location data where dispatcher timestamp is null or not null
        :type dispatcher_timestamp__isnull: datetime
        :param dispatcher_timestamp__lt: Filters vehicle location data where dispatcher timestamp is less than specified value
        :type dispatcher_timestamp__lt: datetime
        :param dispatcher_timestamp__lte: Filters vehicle location data where dispatcher timestamp is less than or equal to specified value
        :type dispatcher_timestamp__lte: datetime
        :param driver_timestamp: Filters vehicle location data by specified driver timestamp
        :type driver_timestamp: datetime
        :param driver_timestamp__gt: Filters vehicle location data where driver timestamp is greater than specified value
        :type driver_timestamp__gt: datetime
        :param driver_timestamp__gte: Filters vehicle location data where driver timestamp is greater than or equal to specified value
        :type driver_timestamp__gte: datetime
        :param driver_timestamp__isnull: Filters vehicle location data where driver timestamp is null or not null
        :type driver_timestamp__isnull: datetime
        :param driver_timestamp__lt: Filters vehicle location data where driver timestamp is less than specified value
        :type driver_timestamp__lt: datetime
        :param driver_timestamp__lte: Filters vehicle location data where driver timestamp is less than or equal to specified value
        :type driver_timestamp__lte: datetime
        :param limit: Maximum number of objects to return per page
        :type limit: int
        :param offset: The initial index from which to return the results
        :type offset: int
        :param truck_reg_number: Filters vehicle location data by specified truck registration number
        :type truck_reg_number: str
        :param waybill_number: Filters vehicle location data by specified waybill number
        :type waybill_number: str
        :param waybill_status: Filters vehicle location data by specified waybill status
        :type waybill_status: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._vehicle_location_data_list_serialize(
            cancelled_timestamp=cancelled_timestamp,
            cancelled_timestamp__gt=cancelled_timestamp__gt,
            cancelled_timestamp__gte=cancelled_timestamp__gte,
            cancelled_timestamp__isnull=cancelled_timestamp__isnull,
            cancelled_timestamp__lt=cancelled_timestamp__lt,
            cancelled_timestamp__lte=cancelled_timestamp__lte,
            confirmed_timestamp=confirmed_timestamp,
            confirmed_timestamp__gt=confirmed_timestamp__gt,
            confirmed_timestamp__gte=confirmed_timestamp__gte,
            confirmed_timestamp__isnull=confirmed_timestamp__isnull,
            confirmed_timestamp__lt=confirmed_timestamp__lt,
            confirmed_timestamp__lte=confirmed_timestamp__lte,
            destination_id=destination_id,
            dispatcher_timestamp=dispatcher_timestamp,
            dispatcher_timestamp__gt=dispatcher_timestamp__gt,
            dispatcher_timestamp__gte=dispatcher_timestamp__gte,
            dispatcher_timestamp__isnull=dispatcher_timestamp__isnull,
            dispatcher_timestamp__lt=dispatcher_timestamp__lt,
            dispatcher_timestamp__lte=dispatcher_timestamp__lte,
            driver_timestamp=driver_timestamp,
            driver_timestamp__gt=driver_timestamp__gt,
            driver_timestamp__gte=driver_timestamp__gte,
            driver_timestamp__isnull=driver_timestamp__isnull,
            driver_timestamp__lt=driver_timestamp__lt,
            driver_timestamp__lte=driver_timestamp__lte,
            limit=limit,
            offset=offset,
            truck_reg_number=truck_reg_number,
            waybill_number=waybill_number,
            waybill_status=waybill_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PaginatedExternalAPIVehicleLocationDataList",
            "403": "DestinationsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def vehicle_location_data_list_without_preload_content(
        self,
        cancelled_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified cancellation timestamp"
            ),
        ] = None,
        cancelled_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than specified value"
            ),
        ] = None,
        cancelled_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        cancelled_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is null or not null"
            ),
        ] = None,
        cancelled_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than specified value"
            ),
        ] = None,
        cancelled_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where cancellation timestamp is less than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified confirmation timestamp"
            ),
        ] = None,
        confirmed_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than specified value"
            ),
        ] = None,
        confirmed_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is greater than or equal to specified value"
            ),
        ] = None,
        confirmed_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is null or not null"
            ),
        ] = None,
        confirmed_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than specified value"
            ),
        ] = None,
        confirmed_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where confirmation timestamp is less than or equal to specified value"
            ),
        ] = None,
        destination_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified destination ID"
            ),
        ] = None,
        dispatcher_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified dispatcher timestamp"
            ),
        ] = None,
        dispatcher_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than specified value"
            ),
        ] = None,
        dispatcher_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value"
            ),
        ] = None,
        dispatcher_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is null or not null"
            ),
        ] = None,
        dispatcher_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than specified value"
            ),
        ] = None,
        dispatcher_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where dispatcher timestamp is less than or equal to specified value"
            ),
        ] = None,
        driver_timestamp: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data by specified driver timestamp"
            ),
        ] = None,
        driver_timestamp__gt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than specified value"
            ),
        ] = None,
        driver_timestamp__gte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is greater than or equal to specified value"
            ),
        ] = None,
        driver_timestamp__isnull: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is null or not null"
            ),
        ] = None,
        driver_timestamp__lt: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than specified value"
            ),
        ] = None,
        driver_timestamp__lte: Annotated[
            Optional[datetime],
            Field(
                description="Filters vehicle location data where driver timestamp is less than or equal to specified value"
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(description="Maximum number of objects to return per page"),
        ] = None,
        offset: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(description="The initial index from which to return the results"),
        ] = None,
        truck_reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified truck registration number"
            ),
        ] = None,
        waybill_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters vehicle location data by specified waybill number"
            ),
        ] = None,
        waybill_status: Annotated[
            Optional[StrictInt],
            Field(
                description="Filters vehicle location data by specified waybill status"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Querying of vehicle location data

        Returns all vehicle location data for waybills associated with your company, according to the specified filters.

        :param cancelled_timestamp: Filters vehicle location data by specified cancellation timestamp
        :type cancelled_timestamp: datetime
        :param cancelled_timestamp__gt: Filters vehicle location data where cancellation timestamp is greater than specified value
        :type cancelled_timestamp__gt: datetime
        :param cancelled_timestamp__gte: Filters vehicle location data where cancellation timestamp is greater than or equal to specified value
        :type cancelled_timestamp__gte: datetime
        :param cancelled_timestamp__isnull: Filters vehicle location data where cancellation timestamp is null or not null
        :type cancelled_timestamp__isnull: datetime
        :param cancelled_timestamp__lt: Filters vehicle location data where cancellation timestamp is less than specified value
        :type cancelled_timestamp__lt: datetime
        :param cancelled_timestamp__lte: Filters vehicle location data where cancellation timestamp is less than or equal to specified value
        :type cancelled_timestamp__lte: datetime
        :param confirmed_timestamp: Filters vehicle location data by specified confirmation timestamp
        :type confirmed_timestamp: datetime
        :param confirmed_timestamp__gt: Filters vehicle location data where confirmation timestamp is greater than specified value
        :type confirmed_timestamp__gt: datetime
        :param confirmed_timestamp__gte: Filters vehicle location data where confirmation timestamp is greater than or equal to specified value
        :type confirmed_timestamp__gte: datetime
        :param confirmed_timestamp__isnull: Filters vehicle location data where confirmation timestamp is null or not null
        :type confirmed_timestamp__isnull: datetime
        :param confirmed_timestamp__lt: Filters vehicle location data where confirmation timestamp is less than specified value
        :type confirmed_timestamp__lt: datetime
        :param confirmed_timestamp__lte: Filters vehicle location data where confirmation timestamp is less than or equal to specified value
        :type confirmed_timestamp__lte: datetime
        :param destination_id: Filters vehicle location data by specified destination ID
        :type destination_id: int
        :param dispatcher_timestamp: Filters vehicle location data by specified dispatcher timestamp
        :type dispatcher_timestamp: datetime
        :param dispatcher_timestamp__gt: Filters vehicle location data where dispatcher timestamp is greater than specified value
        :type dispatcher_timestamp__gt: datetime
        :param dispatcher_timestamp__gte: Filters vehicle location data where dispatcher timestamp is greater than or equal to specified value
        :type dispatcher_timestamp__gte: datetime
        :param dispatcher_timestamp__isnull: Filters vehicle location data where dispatcher timestamp is null or not null
        :type dispatcher_timestamp__isnull: datetime
        :param dispatcher_timestamp__lt: Filters vehicle location data where dispatcher timestamp is less than specified value
        :type dispatcher_timestamp__lt: datetime
        :param dispatcher_timestamp__lte: Filters vehicle location data where dispatcher timestamp is less than or equal to specified value
        :type dispatcher_timestamp__lte: datetime
        :param driver_timestamp: Filters vehicle location data by specified driver timestamp
        :type driver_timestamp: datetime
        :param driver_timestamp__gt: Filters vehicle location data where driver timestamp is greater than specified value
        :type driver_timestamp__gt: datetime
        :param driver_timestamp__gte: Filters vehicle location data where driver timestamp is greater than or equal to specified value
        :type driver_timestamp__gte: datetime
        :param driver_timestamp__isnull: Filters vehicle location data where driver timestamp is null or not null
        :type driver_timestamp__isnull: datetime
        :param driver_timestamp__lt: Filters vehicle location data where driver timestamp is less than specified value
        :type driver_timestamp__lt: datetime
        :param driver_timestamp__lte: Filters vehicle location data where driver timestamp is less than or equal to specified value
        :type driver_timestamp__lte: datetime
        :param limit: Maximum number of objects to return per page
        :type limit: int
        :param offset: The initial index from which to return the results
        :type offset: int
        :param truck_reg_number: Filters vehicle location data by specified truck registration number
        :type truck_reg_number: str
        :param waybill_number: Filters vehicle location data by specified waybill number
        :type waybill_number: str
        :param waybill_status: Filters vehicle location data by specified waybill status
        :type waybill_status: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._vehicle_location_data_list_serialize(
            cancelled_timestamp=cancelled_timestamp,
            cancelled_timestamp__gt=cancelled_timestamp__gt,
            cancelled_timestamp__gte=cancelled_timestamp__gte,
            cancelled_timestamp__isnull=cancelled_timestamp__isnull,
            cancelled_timestamp__lt=cancelled_timestamp__lt,
            cancelled_timestamp__lte=cancelled_timestamp__lte,
            confirmed_timestamp=confirmed_timestamp,
            confirmed_timestamp__gt=confirmed_timestamp__gt,
            confirmed_timestamp__gte=confirmed_timestamp__gte,
            confirmed_timestamp__isnull=confirmed_timestamp__isnull,
            confirmed_timestamp__lt=confirmed_timestamp__lt,
            confirmed_timestamp__lte=confirmed_timestamp__lte,
            destination_id=destination_id,
            dispatcher_timestamp=dispatcher_timestamp,
            dispatcher_timestamp__gt=dispatcher_timestamp__gt,
            dispatcher_timestamp__gte=dispatcher_timestamp__gte,
            dispatcher_timestamp__isnull=dispatcher_timestamp__isnull,
            dispatcher_timestamp__lt=dispatcher_timestamp__lt,
            dispatcher_timestamp__lte=dispatcher_timestamp__lte,
            driver_timestamp=driver_timestamp,
            driver_timestamp__gt=driver_timestamp__gt,
            driver_timestamp__gte=driver_timestamp__gte,
            driver_timestamp__isnull=driver_timestamp__isnull,
            driver_timestamp__lt=driver_timestamp__lt,
            driver_timestamp__lte=driver_timestamp__lte,
            limit=limit,
            offset=offset,
            truck_reg_number=truck_reg_number,
            waybill_number=waybill_number,
            waybill_status=waybill_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "PaginatedExternalAPIVehicleLocationDataList",
            "403": "DestinationsList403Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _vehicle_location_data_list_serialize(
        self,
        cancelled_timestamp,
        cancelled_timestamp__gt,
        cancelled_timestamp__gte,
        cancelled_timestamp__isnull,
        cancelled_timestamp__lt,
        cancelled_timestamp__lte,
        confirmed_timestamp,
        confirmed_timestamp__gt,
        confirmed_timestamp__gte,
        confirmed_timestamp__isnull,
        confirmed_timestamp__lt,
        confirmed_timestamp__lte,
        destination_id,
        dispatcher_timestamp,
        dispatcher_timestamp__gt,
        dispatcher_timestamp__gte,
        dispatcher_timestamp__isnull,
        dispatcher_timestamp__lt,
        dispatcher_timestamp__lte,
        driver_timestamp,
        driver_timestamp__gt,
        driver_timestamp__gte,
        driver_timestamp__isnull,
        driver_timestamp__lt,
        driver_timestamp__lte,
        limit,
        offset,
        truck_reg_number,
        waybill_number,
        waybill_status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cancelled_timestamp is not None:
            if isinstance(cancelled_timestamp, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp",
                        cancelled_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("cancelled_timestamp", cancelled_timestamp))

        if cancelled_timestamp__gt is not None:
            if isinstance(cancelled_timestamp__gt, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp__gt",
                        cancelled_timestamp__gt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("cancelled_timestamp__gt", cancelled_timestamp__gt)
                )

        if cancelled_timestamp__gte is not None:
            if isinstance(cancelled_timestamp__gte, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp__gte",
                        cancelled_timestamp__gte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("cancelled_timestamp__gte", cancelled_timestamp__gte)
                )

        if cancelled_timestamp__isnull is not None:
            if isinstance(cancelled_timestamp__isnull, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp__isnull",
                        cancelled_timestamp__isnull.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("cancelled_timestamp__isnull", cancelled_timestamp__isnull)
                )

        if cancelled_timestamp__lt is not None:
            if isinstance(cancelled_timestamp__lt, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp__lt",
                        cancelled_timestamp__lt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("cancelled_timestamp__lt", cancelled_timestamp__lt)
                )

        if cancelled_timestamp__lte is not None:
            if isinstance(cancelled_timestamp__lte, datetime):
                _query_params.append(
                    (
                        "cancelled_timestamp__lte",
                        cancelled_timestamp__lte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("cancelled_timestamp__lte", cancelled_timestamp__lte)
                )

        if confirmed_timestamp is not None:
            if isinstance(confirmed_timestamp, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp",
                        confirmed_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("confirmed_timestamp", confirmed_timestamp))

        if confirmed_timestamp__gt is not None:
            if isinstance(confirmed_timestamp__gt, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp__gt",
                        confirmed_timestamp__gt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("confirmed_timestamp__gt", confirmed_timestamp__gt)
                )

        if confirmed_timestamp__gte is not None:
            if isinstance(confirmed_timestamp__gte, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp__gte",
                        confirmed_timestamp__gte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("confirmed_timestamp__gte", confirmed_timestamp__gte)
                )

        if confirmed_timestamp__isnull is not None:
            if isinstance(confirmed_timestamp__isnull, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp__isnull",
                        confirmed_timestamp__isnull.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("confirmed_timestamp__isnull", confirmed_timestamp__isnull)
                )

        if confirmed_timestamp__lt is not None:
            if isinstance(confirmed_timestamp__lt, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp__lt",
                        confirmed_timestamp__lt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("confirmed_timestamp__lt", confirmed_timestamp__lt)
                )

        if confirmed_timestamp__lte is not None:
            if isinstance(confirmed_timestamp__lte, datetime):
                _query_params.append(
                    (
                        "confirmed_timestamp__lte",
                        confirmed_timestamp__lte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("confirmed_timestamp__lte", confirmed_timestamp__lte)
                )

        if destination_id is not None:
            _query_params.append(("destination_id", destination_id))

        if dispatcher_timestamp is not None:
            if isinstance(dispatcher_timestamp, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp",
                        dispatcher_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("dispatcher_timestamp", dispatcher_timestamp))

        if dispatcher_timestamp__gt is not None:
            if isinstance(dispatcher_timestamp__gt, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp__gt",
                        dispatcher_timestamp__gt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("dispatcher_timestamp__gt", dispatcher_timestamp__gt)
                )

        if dispatcher_timestamp__gte is not None:
            if isinstance(dispatcher_timestamp__gte, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp__gte",
                        dispatcher_timestamp__gte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("dispatcher_timestamp__gte", dispatcher_timestamp__gte)
                )

        if dispatcher_timestamp__isnull is not None:
            if isinstance(dispatcher_timestamp__isnull, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp__isnull",
                        dispatcher_timestamp__isnull.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("dispatcher_timestamp__isnull", dispatcher_timestamp__isnull)
                )

        if dispatcher_timestamp__lt is not None:
            if isinstance(dispatcher_timestamp__lt, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp__lt",
                        dispatcher_timestamp__lt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("dispatcher_timestamp__lt", dispatcher_timestamp__lt)
                )

        if dispatcher_timestamp__lte is not None:
            if isinstance(dispatcher_timestamp__lte, datetime):
                _query_params.append(
                    (
                        "dispatcher_timestamp__lte",
                        dispatcher_timestamp__lte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("dispatcher_timestamp__lte", dispatcher_timestamp__lte)
                )

        if driver_timestamp is not None:
            if isinstance(driver_timestamp, datetime):
                _query_params.append(
                    (
                        "driver_timestamp",
                        driver_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("driver_timestamp", driver_timestamp))

        if driver_timestamp__gt is not None:
            if isinstance(driver_timestamp__gt, datetime):
                _query_params.append(
                    (
                        "driver_timestamp__gt",
                        driver_timestamp__gt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("driver_timestamp__gt", driver_timestamp__gt))

        if driver_timestamp__gte is not None:
            if isinstance(driver_timestamp__gte, datetime):
                _query_params.append(
                    (
                        "driver_timestamp__gte",
                        driver_timestamp__gte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("driver_timestamp__gte", driver_timestamp__gte))

        if driver_timestamp__isnull is not None:
            if isinstance(driver_timestamp__isnull, datetime):
                _query_params.append(
                    (
                        "driver_timestamp__isnull",
                        driver_timestamp__isnull.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("driver_timestamp__isnull", driver_timestamp__isnull)
                )

        if driver_timestamp__lt is not None:
            if isinstance(driver_timestamp__lt, datetime):
                _query_params.append(
                    (
                        "driver_timestamp__lt",
                        driver_timestamp__lt.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("driver_timestamp__lt", driver_timestamp__lt))

        if driver_timestamp__lte is not None:
            if isinstance(driver_timestamp__lte, datetime):
                _query_params.append(
                    (
                        "driver_timestamp__lte",
                        driver_timestamp__lte.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("driver_timestamp__lte", driver_timestamp__lte))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if truck_reg_number is not None:
            _query_params.append(("truck_reg_number", truck_reg_number))

        if waybill_number is not None:
            _query_params.append(("waybill_number", waybill_number))

        if waybill_status is not None:
            _query_params.append(("waybill_status", waybill_status))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["ApiKeyAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/external-api/vehicle-location-data/",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
