# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from pywaybiller.openapi_client.models.external_api_transport_order import (
    ExternalAPITransportOrder,
)
from pywaybiller.openapi_client.models.external_api_transport_order_cancel import (
    ExternalAPITransportOrderCancel,
)
from pywaybiller.openapi_client.models.external_api_transport_order_update import (
    ExternalAPITransportOrderUpdate,
)
from pywaybiller.openapi_client.models.transport_orders_list200_response import (
    TransportOrdersList200Response,
)

from pywaybiller.openapi_client.api_client import ApiClient
from pywaybiller.openapi_client.api_response import ApiResponse
from pywaybiller.openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class TransportOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def transport_orders_cancel(
        self, id: StrictStr, data: ExternalAPITransportOrderCancel, **kwargs
    ) -> ExternalAPITransportOrderCancel:  # noqa: E501
        """Cancellation of a transport order  # noqa: E501

        Cancels transport order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_cancel(id, data, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPITransportOrderCancel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPITransportOrderCancel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the transport_orders_cancel_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transport_orders_cancel_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transport_orders_cancel_with_http_info(
        self, id: StrictStr, data: ExternalAPITransportOrderCancel, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Cancellation of a transport order  # noqa: E501

        Cancels transport order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_cancel_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPITransportOrderCancel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPITransportOrderCancel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transport_orders_cancel" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPITransportOrderCancel",
        }

        return self.api_client.call_api(
            "/transport-orders/{id}/cancel/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def transport_orders_create(
        self, data: ExternalAPITransportOrder, **kwargs
    ) -> ExternalAPITransportOrder:  # noqa: E501
        """Creation of a transport order  # noqa: E501

        Creates a new transport order.<br><br>     **NB!** All posted IDs are IDs in your system and these are used to match objects in your     system with objects in Waybiller.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_create(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: ExternalAPITransportOrder
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPITransportOrder
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the transport_orders_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transport_orders_create_with_http_info(data, **kwargs)  # noqa: E501

    @validate_arguments
    def transport_orders_create_with_http_info(
        self, data: ExternalAPITransportOrder, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Creation of a transport order  # noqa: E501

        Creates a new transport order.<br><br>     **NB!** All posted IDs are IDs in your system and these are used to match objects in your     system with objects in Waybiller.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: ExternalAPITransportOrder
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPITransportOrder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transport_orders_create" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPITransportOrder",
        }

        return self.api_client.call_api(
            "/transport-orders/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def transport_orders_list(
        self,
        number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified number (case sensitive)."
            ),
        ] = None,
        number__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified number (case insensitive)."
            ),
        ] = None,
        number__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which numbers contain this keyword (case sensitive)."
            ),
        ] = None,
        number__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which numbers contain this keyword (case insensitive)."
            ),
        ] = None,
        number__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order numbers. Multiple values may be separated by commas."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified status (case sensitive)."
            ),
        ] = None,
        status__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified status (case insensitive)."
            ),
        ] = None,
        status__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which statuses contain this keyword (case sensitive)."
            ),
        ] = None,
        status__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which statuses contain this keyword (case insensitive)."
            ),
        ] = None,
        status__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order statuses. Multiple values may be separated by commas."
            ),
        ] = None,
        truck__truck__reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified truck reg number (case sensitive)."
            ),
        ] = None,
        truck__truck__reg_number__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified truck reg number (case insensitive)."
            ),
        ] = None,
        truck__truck__reg_number__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which truck reg numbers contain this keyword (case sensitive)."
            ),
        ] = None,
        truck__truck__reg_number__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which truck reg numbers contain this keyword (case insensitive)."
            ),
        ] = None,
        truck__truck__reg_number__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order truck reg numbers. Multiple values may be separated by commas."
            ),
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="start_date")
        ] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="end_date")] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        **kwargs
    ) -> TransportOrdersList200Response:  # noqa: E501
        """Querying of transport orders  # noqa: E501

        Returns all transport orders associated with your company, according to the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_list(number, number__iexact, number__contains, number__icontains, number__in, status, status__iexact, status__contains, status__icontains, status__in, truck__truck__reg_number, truck__truck__reg_number__iexact, truck__truck__reg_number__contains, truck__truck__reg_number__icontains, truck__truck__reg_number__in, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param number: Filters transport orders with specified number (case sensitive).
        :type number: str
        :param number__iexact: Filters transport orders with specified number (case insensitive).
        :type number__iexact: str
        :param number__contains: Filters transport orders of which numbers contain this keyword (case sensitive).
        :type number__contains: str
        :param number__icontains: Filters transport orders of which numbers contain this keyword (case insensitive).
        :type number__icontains: str
        :param number__in: Filters transport orders with specified list of transport order numbers. Multiple values may be separated by commas.
        :type number__in: str
        :param status: Filters transport orders with specified status (case sensitive).
        :type status: str
        :param status__iexact: Filters transport orders with specified status (case insensitive).
        :type status__iexact: str
        :param status__contains: Filters transport orders of which statuses contain this keyword (case sensitive).
        :type status__contains: str
        :param status__icontains: Filters transport orders of which statuses contain this keyword (case insensitive).
        :type status__icontains: str
        :param status__in: Filters transport orders with specified list of transport order statuses. Multiple values may be separated by commas.
        :type status__in: str
        :param truck__truck__reg_number: Filters transport orders with specified truck reg number (case sensitive).
        :type truck__truck__reg_number: str
        :param truck__truck__reg_number__iexact: Filters transport orders with specified truck reg number (case insensitive).
        :type truck__truck__reg_number__iexact: str
        :param truck__truck__reg_number__contains: Filters transport orders of which truck reg numbers contain this keyword (case sensitive).
        :type truck__truck__reg_number__contains: str
        :param truck__truck__reg_number__icontains: Filters transport orders of which truck reg numbers contain this keyword (case insensitive).
        :type truck__truck__reg_number__icontains: str
        :param truck__truck__reg_number__in: Filters transport orders with specified list of transport order truck reg numbers. Multiple values may be separated by commas.
        :type truck__truck__reg_number__in: str
        :param start_date: start_date
        :type start_date: str
        :param end_date: end_date
        :type end_date: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransportOrdersList200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the transport_orders_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transport_orders_list_with_http_info(
            number,
            number__iexact,
            number__contains,
            number__icontains,
            number__in,
            status,
            status__iexact,
            status__contains,
            status__icontains,
            status__in,
            truck__truck__reg_number,
            truck__truck__reg_number__iexact,
            truck__truck__reg_number__contains,
            truck__truck__reg_number__icontains,
            truck__truck__reg_number__in,
            start_date,
            end_date,
            limit,
            offset,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def transport_orders_list_with_http_info(
        self,
        number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified number (case sensitive)."
            ),
        ] = None,
        number__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified number (case insensitive)."
            ),
        ] = None,
        number__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which numbers contain this keyword (case sensitive)."
            ),
        ] = None,
        number__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which numbers contain this keyword (case insensitive)."
            ),
        ] = None,
        number__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order numbers. Multiple values may be separated by commas."
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified status (case sensitive)."
            ),
        ] = None,
        status__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified status (case insensitive)."
            ),
        ] = None,
        status__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which statuses contain this keyword (case sensitive)."
            ),
        ] = None,
        status__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which statuses contain this keyword (case insensitive)."
            ),
        ] = None,
        status__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order statuses. Multiple values may be separated by commas."
            ),
        ] = None,
        truck__truck__reg_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified truck reg number (case sensitive)."
            ),
        ] = None,
        truck__truck__reg_number__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified truck reg number (case insensitive)."
            ),
        ] = None,
        truck__truck__reg_number__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which truck reg numbers contain this keyword (case sensitive)."
            ),
        ] = None,
        truck__truck__reg_number__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders of which truck reg numbers contain this keyword (case insensitive)."
            ),
        ] = None,
        truck__truck__reg_number__in: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters transport orders with specified list of transport order truck reg numbers. Multiple values may be separated by commas."
            ),
        ] = None,
        start_date: Annotated[
            Optional[StrictStr], Field(description="start_date")
        ] = None,
        end_date: Annotated[Optional[StrictStr], Field(description="end_date")] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of transport orders  # noqa: E501

        Returns all transport orders associated with your company, according to the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_list_with_http_info(number, number__iexact, number__contains, number__icontains, number__in, status, status__iexact, status__contains, status__icontains, status__in, truck__truck__reg_number, truck__truck__reg_number__iexact, truck__truck__reg_number__contains, truck__truck__reg_number__icontains, truck__truck__reg_number__in, start_date, end_date, limit, offset, async_req=True)
        >>> result = thread.get()

        :param number: Filters transport orders with specified number (case sensitive).
        :type number: str
        :param number__iexact: Filters transport orders with specified number (case insensitive).
        :type number__iexact: str
        :param number__contains: Filters transport orders of which numbers contain this keyword (case sensitive).
        :type number__contains: str
        :param number__icontains: Filters transport orders of which numbers contain this keyword (case insensitive).
        :type number__icontains: str
        :param number__in: Filters transport orders with specified list of transport order numbers. Multiple values may be separated by commas.
        :type number__in: str
        :param status: Filters transport orders with specified status (case sensitive).
        :type status: str
        :param status__iexact: Filters transport orders with specified status (case insensitive).
        :type status__iexact: str
        :param status__contains: Filters transport orders of which statuses contain this keyword (case sensitive).
        :type status__contains: str
        :param status__icontains: Filters transport orders of which statuses contain this keyword (case insensitive).
        :type status__icontains: str
        :param status__in: Filters transport orders with specified list of transport order statuses. Multiple values may be separated by commas.
        :type status__in: str
        :param truck__truck__reg_number: Filters transport orders with specified truck reg number (case sensitive).
        :type truck__truck__reg_number: str
        :param truck__truck__reg_number__iexact: Filters transport orders with specified truck reg number (case insensitive).
        :type truck__truck__reg_number__iexact: str
        :param truck__truck__reg_number__contains: Filters transport orders of which truck reg numbers contain this keyword (case sensitive).
        :type truck__truck__reg_number__contains: str
        :param truck__truck__reg_number__icontains: Filters transport orders of which truck reg numbers contain this keyword (case insensitive).
        :type truck__truck__reg_number__icontains: str
        :param truck__truck__reg_number__in: Filters transport orders with specified list of transport order truck reg numbers. Multiple values may be separated by commas.
        :type truck__truck__reg_number__in: str
        :param start_date: start_date
        :type start_date: str
        :param end_date: end_date
        :type end_date: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransportOrdersList200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "number",
            "number__iexact",
            "number__contains",
            "number__icontains",
            "number__in",
            "status",
            "status__iexact",
            "status__contains",
            "status__icontains",
            "status__in",
            "truck__truck__reg_number",
            "truck__truck__reg_number__iexact",
            "truck__truck__reg_number__contains",
            "truck__truck__reg_number__icontains",
            "truck__truck__reg_number__in",
            "start_date",
            "end_date",
            "limit",
            "offset",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transport_orders_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("number") is not None:  # noqa: E501
            _query_params.append(("number", _params["number"]))

        if _params.get("number__iexact") is not None:  # noqa: E501
            _query_params.append(("number__iexact", _params["number__iexact"]))

        if _params.get("number__contains") is not None:  # noqa: E501
            _query_params.append(("number__contains", _params["number__contains"]))

        if _params.get("number__icontains") is not None:  # noqa: E501
            _query_params.append(("number__icontains", _params["number__icontains"]))

        if _params.get("number__in") is not None:  # noqa: E501
            _query_params.append(("number__in", _params["number__in"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        if _params.get("status__iexact") is not None:  # noqa: E501
            _query_params.append(("status__iexact", _params["status__iexact"]))

        if _params.get("status__contains") is not None:  # noqa: E501
            _query_params.append(("status__contains", _params["status__contains"]))

        if _params.get("status__icontains") is not None:  # noqa: E501
            _query_params.append(("status__icontains", _params["status__icontains"]))

        if _params.get("status__in") is not None:  # noqa: E501
            _query_params.append(("status__in", _params["status__in"]))

        if _params.get("truck__truck__reg_number") is not None:  # noqa: E501
            _query_params.append(
                ("truck__truck__reg_number", _params["truck__truck__reg_number"])
            )

        if _params.get("truck__truck__reg_number__iexact") is not None:  # noqa: E501
            _query_params.append(
                (
                    "truck__truck__reg_number__iexact",
                    _params["truck__truck__reg_number__iexact"],
                )
            )

        if _params.get("truck__truck__reg_number__contains") is not None:  # noqa: E501
            _query_params.append(
                (
                    "truck__truck__reg_number__contains",
                    _params["truck__truck__reg_number__contains"],
                )
            )

        if _params.get("truck__truck__reg_number__icontains") is not None:  # noqa: E501
            _query_params.append(
                (
                    "truck__truck__reg_number__icontains",
                    _params["truck__truck__reg_number__icontains"],
                )
            )

        if _params.get("truck__truck__reg_number__in") is not None:  # noqa: E501
            _query_params.append(
                (
                    "truck__truck__reg_number__in",
                    _params["truck__truck__reg_number__in"],
                )
            )

        if _params.get("start_date") is not None:  # noqa: E501
            _query_params.append(("start_date", _params["start_date"]))

        if _params.get("end_date") is not None:  # noqa: E501
            _query_params.append(("end_date", _params["end_date"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "TransportOrdersList200Response",
        }

        return self.api_client.call_api(
            "/transport-orders/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def transport_orders_read(
        self,
        id: Annotated[
            StrictStr, Field(..., description="The ID of the transport order queried.")
        ],
        **kwargs
    ) -> ExternalAPITransportOrder:  # noqa: E501
        """Querying of a single transport order  # noqa: E501

        Returns a transport order with the specified ID. Only companies associated with the transport order can query     it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_read(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the transport order queried. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPITransportOrder
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the transport_orders_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transport_orders_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def transport_orders_read_with_http_info(
        self,
        id: Annotated[
            StrictStr, Field(..., description="The ID of the transport order queried.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of a single transport order  # noqa: E501

        Returns a transport order with the specified ID. Only companies associated with the transport order can query     it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the transport order queried. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPITransportOrder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transport_orders_read" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPITransportOrder",
        }

        return self.api_client.call_api(
            "/transport-orders/{id}/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def transport_orders_update(
        self, id: StrictStr, data: ExternalAPITransportOrderUpdate, **kwargs
    ) -> ExternalAPITransportOrderUpdate:  # noqa: E501
        """Editing of a transport order  # noqa: E501

        Edits transport order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_update(id, data, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPITransportOrderUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPITransportOrderUpdate
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the transport_orders_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transport_orders_update_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def transport_orders_update_with_http_info(
        self, id: StrictStr, data: ExternalAPITransportOrderUpdate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Editing of a transport order  # noqa: E501

        Edits transport order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transport_orders_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPITransportOrderUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPITransportOrderUpdate, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transport_orders_update" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPITransportOrderUpdate",
        }

        return self.api_client.call_api(
            "/transport-orders/{id}/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
