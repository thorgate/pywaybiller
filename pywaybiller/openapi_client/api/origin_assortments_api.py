# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from pywaybiller.openapi_client.models.external_api_origin_assortment import (
    ExternalAPIOriginAssortment,
)
from pywaybiller.openapi_client.models.origin_assortments_list200_response import (
    OriginAssortmentsList200Response,
)

from pywaybiller.openapi_client.api_client import ApiClient
from pywaybiller.openapi_client.api_response import ApiResponse
from pywaybiller.openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class OriginAssortmentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def origin_assortments_list(
        self,
        origin__id__lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (less than or equal to)."
            ),
        ] = None,
        origin__id__gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (greater than or equal to)."
            ),
        ] = None,
        origin__id__lt: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (less than)."
            ),
        ] = None,
        origin__id__gt: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (greater than)."
            ),
        ] = None,
        origin__id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (exact)."
            ),
        ] = None,
        origin__id__in: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified list of origin ids. Multiple values may be separated by commas."
            ),
        ] = None,
        origin__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified origin (case sensitive)."
            ),
        ] = None,
        origin__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified origin (case insensitive)."
            ),
        ] = None,
        origin__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which origins contain this keyword (case sensitive)."
            ),
        ] = None,
        origin__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which origins contain this keyword (case insensitive)."
            ),
        ] = None,
        assortment__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified assortment (case sensitive)."
            ),
        ] = None,
        assortment__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified assortment (case insensitive)."
            ),
        ] = None,
        assortment__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which assortments contain this keyword (case sensitive)."
            ),
        ] = None,
        assortment__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which assortments contain this keyword (case insensitive)."
            ),
        ] = None,
        subset_type__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset type (case sensitive)."
            ),
        ] = None,
        subset_type__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset type (case insensitive)."
            ),
        ] = None,
        subset_type__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subset types contain this keyword (case sensitive)."
            ),
        ] = None,
        subset_type__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subset types contain this keyword (case insensitive)."
            ),
        ] = None,
        subset__value: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset (case sensitive)."
            ),
        ] = None,
        subset__value__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset (case insensitive)."
            ),
        ] = None,
        subset__value__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subsets contain this keyword (case sensitive)."
            ),
        ] = None,
        subset__value__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subsets contain this keyword (case insensitive)."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        **kwargs
    ) -> OriginAssortmentsList200Response:  # noqa: E501
        """Querying of origin assortments  # noqa: E501

        Returns all origin assortments (according to specified filters) that are associated with your company:     <ul>     <li>your company's origin assortments</li>     <li>your partner company's origin assortments</li>     <li>public origin assortments</li>     <ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.origin_assortments_list(origin__id__lte, origin__id__gte, origin__id__lt, origin__id__gt, origin__id, origin__id__in, origin__name, origin__name__iexact, origin__name__contains, origin__name__icontains, assortment__name, assortment__name__iexact, assortment__name__contains, assortment__name__icontains, subset_type__name, subset_type__name__iexact, subset_type__name__contains, subset_type__name__icontains, subset__value, subset__value__iexact, subset__value__contains, subset__value__icontains, limit, offset, async_req=True)
        >>> result = thread.get()

        :param origin__id__lte: Filters origin assortments with specified origin id (less than or equal to).
        :type origin__id__lte: float
        :param origin__id__gte: Filters origin assortments with specified origin id (greater than or equal to).
        :type origin__id__gte: float
        :param origin__id__lt: Filters origin assortments with specified origin id (less than).
        :type origin__id__lt: float
        :param origin__id__gt: Filters origin assortments with specified origin id (greater than).
        :type origin__id__gt: float
        :param origin__id: Filters origin assortments with specified origin id (exact).
        :type origin__id: float
        :param origin__id__in: Filters origin assortments with specified list of origin ids. Multiple values may be separated by commas.
        :type origin__id__in: float
        :param origin__name: Filters origin assortments with specified origin (case sensitive).
        :type origin__name: str
        :param origin__name__iexact: Filters origin assortments with specified origin (case insensitive).
        :type origin__name__iexact: str
        :param origin__name__contains: Filters origin assortments of which origins contain this keyword (case sensitive).
        :type origin__name__contains: str
        :param origin__name__icontains: Filters origin assortments of which origins contain this keyword (case insensitive).
        :type origin__name__icontains: str
        :param assortment__name: Filters origin assortments with specified assortment (case sensitive).
        :type assortment__name: str
        :param assortment__name__iexact: Filters origin assortments with specified assortment (case insensitive).
        :type assortment__name__iexact: str
        :param assortment__name__contains: Filters origin assortments of which assortments contain this keyword (case sensitive).
        :type assortment__name__contains: str
        :param assortment__name__icontains: Filters origin assortments of which assortments contain this keyword (case insensitive).
        :type assortment__name__icontains: str
        :param subset_type__name: Filters origin assortments with specified subset type (case sensitive).
        :type subset_type__name: str
        :param subset_type__name__iexact: Filters origin assortments with specified subset type (case insensitive).
        :type subset_type__name__iexact: str
        :param subset_type__name__contains: Filters origin assortments of which subset types contain this keyword (case sensitive).
        :type subset_type__name__contains: str
        :param subset_type__name__icontains: Filters origin assortments of which subset types contain this keyword (case insensitive).
        :type subset_type__name__icontains: str
        :param subset__value: Filters origin assortments with specified subset (case sensitive).
        :type subset__value: str
        :param subset__value__iexact: Filters origin assortments with specified subset (case insensitive).
        :type subset__value__iexact: str
        :param subset__value__contains: Filters origin assortments of which subsets contain this keyword (case sensitive).
        :type subset__value__contains: str
        :param subset__value__icontains: Filters origin assortments of which subsets contain this keyword (case insensitive).
        :type subset__value__icontains: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OriginAssortmentsList200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the origin_assortments_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.origin_assortments_list_with_http_info(
            origin__id__lte,
            origin__id__gte,
            origin__id__lt,
            origin__id__gt,
            origin__id,
            origin__id__in,
            origin__name,
            origin__name__iexact,
            origin__name__contains,
            origin__name__icontains,
            assortment__name,
            assortment__name__iexact,
            assortment__name__contains,
            assortment__name__icontains,
            subset_type__name,
            subset_type__name__iexact,
            subset_type__name__contains,
            subset_type__name__icontains,
            subset__value,
            subset__value__iexact,
            subset__value__contains,
            subset__value__icontains,
            limit,
            offset,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def origin_assortments_list_with_http_info(
        self,
        origin__id__lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (less than or equal to)."
            ),
        ] = None,
        origin__id__gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (greater than or equal to)."
            ),
        ] = None,
        origin__id__lt: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (less than)."
            ),
        ] = None,
        origin__id__gt: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (greater than)."
            ),
        ] = None,
        origin__id: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified origin id (exact)."
            ),
        ] = None,
        origin__id__in: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="Filters origin assortments with specified list of origin ids. Multiple values may be separated by commas."
            ),
        ] = None,
        origin__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified origin (case sensitive)."
            ),
        ] = None,
        origin__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified origin (case insensitive)."
            ),
        ] = None,
        origin__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which origins contain this keyword (case sensitive)."
            ),
        ] = None,
        origin__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which origins contain this keyword (case insensitive)."
            ),
        ] = None,
        assortment__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified assortment (case sensitive)."
            ),
        ] = None,
        assortment__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified assortment (case insensitive)."
            ),
        ] = None,
        assortment__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which assortments contain this keyword (case sensitive)."
            ),
        ] = None,
        assortment__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which assortments contain this keyword (case insensitive)."
            ),
        ] = None,
        subset_type__name: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset type (case sensitive)."
            ),
        ] = None,
        subset_type__name__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset type (case insensitive)."
            ),
        ] = None,
        subset_type__name__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subset types contain this keyword (case sensitive)."
            ),
        ] = None,
        subset_type__name__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subset types contain this keyword (case insensitive)."
            ),
        ] = None,
        subset__value: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset (case sensitive)."
            ),
        ] = None,
        subset__value__iexact: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments with specified subset (case insensitive)."
            ),
        ] = None,
        subset__value__contains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subsets contain this keyword (case sensitive)."
            ),
        ] = None,
        subset__value__icontains: Annotated[
            Optional[StrictStr],
            Field(
                description="Filters origin assortments of which subsets contain this keyword (case insensitive)."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of origin assortments  # noqa: E501

        Returns all origin assortments (according to specified filters) that are associated with your company:     <ul>     <li>your company's origin assortments</li>     <li>your partner company's origin assortments</li>     <li>public origin assortments</li>     <ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.origin_assortments_list_with_http_info(origin__id__lte, origin__id__gte, origin__id__lt, origin__id__gt, origin__id, origin__id__in, origin__name, origin__name__iexact, origin__name__contains, origin__name__icontains, assortment__name, assortment__name__iexact, assortment__name__contains, assortment__name__icontains, subset_type__name, subset_type__name__iexact, subset_type__name__contains, subset_type__name__icontains, subset__value, subset__value__iexact, subset__value__contains, subset__value__icontains, limit, offset, async_req=True)
        >>> result = thread.get()

        :param origin__id__lte: Filters origin assortments with specified origin id (less than or equal to).
        :type origin__id__lte: float
        :param origin__id__gte: Filters origin assortments with specified origin id (greater than or equal to).
        :type origin__id__gte: float
        :param origin__id__lt: Filters origin assortments with specified origin id (less than).
        :type origin__id__lt: float
        :param origin__id__gt: Filters origin assortments with specified origin id (greater than).
        :type origin__id__gt: float
        :param origin__id: Filters origin assortments with specified origin id (exact).
        :type origin__id: float
        :param origin__id__in: Filters origin assortments with specified list of origin ids. Multiple values may be separated by commas.
        :type origin__id__in: float
        :param origin__name: Filters origin assortments with specified origin (case sensitive).
        :type origin__name: str
        :param origin__name__iexact: Filters origin assortments with specified origin (case insensitive).
        :type origin__name__iexact: str
        :param origin__name__contains: Filters origin assortments of which origins contain this keyword (case sensitive).
        :type origin__name__contains: str
        :param origin__name__icontains: Filters origin assortments of which origins contain this keyword (case insensitive).
        :type origin__name__icontains: str
        :param assortment__name: Filters origin assortments with specified assortment (case sensitive).
        :type assortment__name: str
        :param assortment__name__iexact: Filters origin assortments with specified assortment (case insensitive).
        :type assortment__name__iexact: str
        :param assortment__name__contains: Filters origin assortments of which assortments contain this keyword (case sensitive).
        :type assortment__name__contains: str
        :param assortment__name__icontains: Filters origin assortments of which assortments contain this keyword (case insensitive).
        :type assortment__name__icontains: str
        :param subset_type__name: Filters origin assortments with specified subset type (case sensitive).
        :type subset_type__name: str
        :param subset_type__name__iexact: Filters origin assortments with specified subset type (case insensitive).
        :type subset_type__name__iexact: str
        :param subset_type__name__contains: Filters origin assortments of which subset types contain this keyword (case sensitive).
        :type subset_type__name__contains: str
        :param subset_type__name__icontains: Filters origin assortments of which subset types contain this keyword (case insensitive).
        :type subset_type__name__icontains: str
        :param subset__value: Filters origin assortments with specified subset (case sensitive).
        :type subset__value: str
        :param subset__value__iexact: Filters origin assortments with specified subset (case insensitive).
        :type subset__value__iexact: str
        :param subset__value__contains: Filters origin assortments of which subsets contain this keyword (case sensitive).
        :type subset__value__contains: str
        :param subset__value__icontains: Filters origin assortments of which subsets contain this keyword (case insensitive).
        :type subset__value__icontains: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OriginAssortmentsList200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "origin__id__lte",
            "origin__id__gte",
            "origin__id__lt",
            "origin__id__gt",
            "origin__id",
            "origin__id__in",
            "origin__name",
            "origin__name__iexact",
            "origin__name__contains",
            "origin__name__icontains",
            "assortment__name",
            "assortment__name__iexact",
            "assortment__name__contains",
            "assortment__name__icontains",
            "subset_type__name",
            "subset_type__name__iexact",
            "subset_type__name__contains",
            "subset_type__name__icontains",
            "subset__value",
            "subset__value__iexact",
            "subset__value__contains",
            "subset__value__icontains",
            "limit",
            "offset",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method origin_assortments_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("origin__id__lte") is not None:  # noqa: E501
            _query_params.append(("origin__id__lte", _params["origin__id__lte"]))

        if _params.get("origin__id__gte") is not None:  # noqa: E501
            _query_params.append(("origin__id__gte", _params["origin__id__gte"]))

        if _params.get("origin__id__lt") is not None:  # noqa: E501
            _query_params.append(("origin__id__lt", _params["origin__id__lt"]))

        if _params.get("origin__id__gt") is not None:  # noqa: E501
            _query_params.append(("origin__id__gt", _params["origin__id__gt"]))

        if _params.get("origin__id") is not None:  # noqa: E501
            _query_params.append(("origin__id", _params["origin__id"]))

        if _params.get("origin__id__in") is not None:  # noqa: E501
            _query_params.append(("origin__id__in", _params["origin__id__in"]))

        if _params.get("origin__name") is not None:  # noqa: E501
            _query_params.append(("origin__name", _params["origin__name"]))

        if _params.get("origin__name__iexact") is not None:  # noqa: E501
            _query_params.append(
                ("origin__name__iexact", _params["origin__name__iexact"])
            )

        if _params.get("origin__name__contains") is not None:  # noqa: E501
            _query_params.append(
                ("origin__name__contains", _params["origin__name__contains"])
            )

        if _params.get("origin__name__icontains") is not None:  # noqa: E501
            _query_params.append(
                ("origin__name__icontains", _params["origin__name__icontains"])
            )

        if _params.get("assortment__name") is not None:  # noqa: E501
            _query_params.append(("assortment__name", _params["assortment__name"]))

        if _params.get("assortment__name__iexact") is not None:  # noqa: E501
            _query_params.append(
                ("assortment__name__iexact", _params["assortment__name__iexact"])
            )

        if _params.get("assortment__name__contains") is not None:  # noqa: E501
            _query_params.append(
                ("assortment__name__contains", _params["assortment__name__contains"])
            )

        if _params.get("assortment__name__icontains") is not None:  # noqa: E501
            _query_params.append(
                ("assortment__name__icontains", _params["assortment__name__icontains"])
            )

        if _params.get("subset_type__name") is not None:  # noqa: E501
            _query_params.append(("subset_type__name", _params["subset_type__name"]))

        if _params.get("subset_type__name__iexact") is not None:  # noqa: E501
            _query_params.append(
                ("subset_type__name__iexact", _params["subset_type__name__iexact"])
            )

        if _params.get("subset_type__name__contains") is not None:  # noqa: E501
            _query_params.append(
                ("subset_type__name__contains", _params["subset_type__name__contains"])
            )

        if _params.get("subset_type__name__icontains") is not None:  # noqa: E501
            _query_params.append(
                (
                    "subset_type__name__icontains",
                    _params["subset_type__name__icontains"],
                )
            )

        if _params.get("subset__value") is not None:  # noqa: E501
            _query_params.append(("subset__value", _params["subset__value"]))

        if _params.get("subset__value__iexact") is not None:  # noqa: E501
            _query_params.append(
                ("subset__value__iexact", _params["subset__value__iexact"])
            )

        if _params.get("subset__value__contains") is not None:  # noqa: E501
            _query_params.append(
                ("subset__value__contains", _params["subset__value__contains"])
            )

        if _params.get("subset__value__icontains") is not None:  # noqa: E501
            _query_params.append(
                ("subset__value__icontains", _params["subset__value__icontains"])
            )

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "OriginAssortmentsList200Response",
        }

        return self.api_client.call_api(
            "/origin-assortments/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def origin_assortments_read(
        self, id: StrictStr, **kwargs
    ) -> ExternalAPIOriginAssortment:  # noqa: E501
        """Querying of a single origin assortment  # noqa: E501

        Returns an origin assortment with the specified ID. It is possible to query only the origin assortment that     your company has access to:     <ul>     <li>your company's origin assortments</li>     <li>your partner company's origin assortments</li>     <li>public origin assortments</li>     <ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.origin_assortments_read(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIOriginAssortment
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the origin_assortments_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.origin_assortments_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def origin_assortments_read_with_http_info(
        self, id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of a single origin assortment  # noqa: E501

        Returns an origin assortment with the specified ID. It is possible to query only the origin assortment that     your company has access to:     <ul>     <li>your company's origin assortments</li>     <li>your partner company's origin assortments</li>     <li>public origin assortments</li>     <ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.origin_assortments_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIOriginAssortment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method origin_assortments_read" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIOriginAssortment",
        }

        return self.api_client.call_api(
            "/origin-assortments/{id}/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
