# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from pywaybiller.openapi_client.models.external_api_waybill_accept import (
    ExternalAPIWaybillAccept,
)
from pywaybiller.openapi_client.models.external_api_waybill_accepted_amounts import (
    ExternalAPIWaybillAcceptedAmounts,
)
from pywaybiller.openapi_client.models.external_api_waybill_cancel import (
    ExternalAPIWaybillCancel,
)
from pywaybiller.openapi_client.models.external_api_waybill_comment import (
    ExternalAPIWaybillComment,
)
from pywaybiller.openapi_client.models.external_api_waybill_create import (
    ExternalAPIWaybillCreate,
)
from pywaybiller.openapi_client.models.external_api_waybill_dispatched_amounts import (
    ExternalAPIWaybillDispatchedAmounts,
)
from pywaybiller.openapi_client.models.external_api_waybill_finish_drive import (
    ExternalAPIWaybillFinishDrive,
)
from pywaybiller.openapi_client.models.external_api_waybill_refuse import (
    ExternalAPIWaybillRefuse,
)
from pywaybiller.openapi_client.models.external_api_waybill_retrieve import (
    ExternalAPIWaybillRetrieve,
)
from pywaybiller.openapi_client.models.external_api_waybill_start_drive import (
    ExternalAPIWaybillStartDrive,
)
from pywaybiller.openapi_client.models.external_api_waybill_vehicle_location import (
    ExternalAPIWaybillVehicleLocation,
)
from pywaybiller.openapi_client.models.waybills_list200_response import (
    WaybillsList200Response,
)

from pywaybiller.openapi_client.api_client import ApiClient
from pywaybiller.openapi_client.api_response import ApiResponse
from pywaybiller.openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class WaybillsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def waybills_accept(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillAccept,
        **kwargs
    ) -> ExternalAPIWaybillAccept:  # noqa: E501
        """Accepting waybill  # noqa: E501

        Sets the status of a waybill to `accepted`. Only the receiving company of the waybill is authorized to accept     the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_accept(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillAccept
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillAccept
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_accept_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_accept_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_accept_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillAccept,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Accepting waybill  # noqa: E501

        Sets the status of a waybill to `accepted`. Only the receiving company of the waybill is authorized to accept     the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_accept_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillAccept
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillAccept, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_accept" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillAccept",
        }

        return self.api_client.call_api(
            "/waybills/{id}/accept/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_cancel(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillCancel,
        **kwargs
    ) -> ExternalAPIWaybillCancel:  # noqa: E501
        """Cancelling waybill  # noqa: E501

        Marks waybill as `cancelled`. Any waybill can be cancelled except waybills with status `accepted`.     Waybill can be cancelled by origin owner, transportation company or receiver company or its representative.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_cancel(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillCancel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillCancel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_cancel_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_cancel_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_cancel_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillCancel,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Cancelling waybill  # noqa: E501

        Marks waybill as `cancelled`. Any waybill can be cancelled except waybills with status `accepted`.     Waybill can be cancelled by origin owner, transportation company or receiver company or its representative.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_cancel_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillCancel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillCancel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_cancel" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillCancel",
        }

        return self.api_client.call_api(
            "/waybills/{id}/cancel/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_comment(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillComment,
        **kwargs
    ) -> ExternalAPIWaybillComment:  # noqa: E501
        """Commenting waybill  # noqa: E501

        Adds a comment to the waybill. Only companies associated with the waybill can add comments to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_comment(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillComment
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillComment
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_comment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_comment_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_comment_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillComment,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Commenting waybill  # noqa: E501

        Adds a comment to the waybill. Only companies associated with the waybill can add comments to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_comment_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillComment
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillComment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_comment" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPIWaybillComment",
        }

        return self.api_client.call_api(
            "/waybills/{id}/comment/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_create(
        self, data: ExternalAPIWaybillCreate, **kwargs
    ) -> ExternalAPIWaybillCreate:  # noqa: E501
        """Creation of a waybill  # noqa: E501

        Creates a new waybill.<br><br>     **NB!** In this way posted IDs are IDs in your system and these are used to match objects in     your system with objects in Waybiller.     It is also possible to use the origin or destination ID in Waybiller     (if you have received those via GET Origins or GET Destinations endpoints).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_create(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: ExternalAPIWaybillCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillCreate
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_create_with_http_info(data, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_create_with_http_info(
        self, data: ExternalAPIWaybillCreate, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Creation of a waybill  # noqa: E501

        Creates a new waybill.<br><br>     **NB!** In this way posted IDs are IDs in your system and these are used to match objects in     your system with objects in Waybiller.     It is also possible to use the origin or destination ID in Waybiller     (if you have received those via GET Origins or GET Destinations endpoints).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: ExternalAPIWaybillCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillCreate, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_create" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPIWaybillCreate",
        }

        return self.api_client.call_api(
            "/waybills/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_finish_drive(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillFinishDrive,
        **kwargs
    ) -> ExternalAPIWaybillFinishDrive:  # noqa: E501
        """Completing driving  # noqa: E501

        Sets the status of a waybill to `in destination`. Waybill status has to be `in progress` to use this endpoint.     Only the transportation company or receiving company of the waybill are authorized to move waybill to `in     destination`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_finish_drive(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillFinishDrive
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillFinishDrive
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_finish_drive_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_finish_drive_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_finish_drive_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillFinishDrive,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Completing driving  # noqa: E501

        Sets the status of a waybill to `in destination`. Waybill status has to be `in progress` to use this endpoint.     Only the transportation company or receiving company of the waybill are authorized to move waybill to `in     destination`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_finish_drive_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillFinishDrive
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillFinishDrive, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_finish_drive" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPIWaybillFinishDrive",
        }

        return self.api_client.call_api(
            "/waybills/{id}/finish_drive/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_list(
        self,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        dispatcher_timestamp__gt: Optional[StrictStr] = None,
        dispatcher_timestamp__lt: Optional[StrictStr] = None,
        **kwargs
    ) -> WaybillsList200Response:  # noqa: E501
        """Querying of waybills  # noqa: E501

        Returns all waybills associated with your company, according to the specified filters.<br><br>     **NB!** By default, past 30 days according to the `dispatcher_timestamp` field waybills are returned. Use     `dispatcher_timestamp__lt` and `dispatcher_timestamp__gt` for filtering. Note that the maximum range is 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_list(limit, offset, dispatcher_timestamp__gt, dispatcher_timestamp__lt, async_req=True)
        >>> result = thread.get()

        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param dispatcher_timestamp__gt:
        :type dispatcher_timestamp__gt: str
        :param dispatcher_timestamp__lt:
        :type dispatcher_timestamp__lt: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WaybillsList200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_list_with_http_info(
            limit, offset, dispatcher_timestamp__gt, dispatcher_timestamp__lt, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_list_with_http_info(
        self,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of results to return per page."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(description="The initial index from which to return the results."),
        ] = None,
        dispatcher_timestamp__gt: Optional[StrictStr] = None,
        dispatcher_timestamp__lt: Optional[StrictStr] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of waybills  # noqa: E501

        Returns all waybills associated with your company, according to the specified filters.<br><br>     **NB!** By default, past 30 days according to the `dispatcher_timestamp` field waybills are returned. Use     `dispatcher_timestamp__lt` and `dispatcher_timestamp__gt` for filtering. Note that the maximum range is 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_list_with_http_info(limit, offset, dispatcher_timestamp__gt, dispatcher_timestamp__lt, async_req=True)
        >>> result = thread.get()

        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param dispatcher_timestamp__gt:
        :type dispatcher_timestamp__gt: str
        :param dispatcher_timestamp__lt:
        :type dispatcher_timestamp__lt: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WaybillsList200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "limit",
            "offset",
            "dispatcher_timestamp__gt",
            "dispatcher_timestamp__lt",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("dispatcher_timestamp__gt") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__gt", _params["dispatcher_timestamp__gt"])
            )

        if _params.get("dispatcher_timestamp__lt") is not None:  # noqa: E501
            _query_params.append(
                ("dispatcher_timestamp__lt", _params["dispatcher_timestamp__lt"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "WaybillsList200Response",
        }

        return self.api_client.call_api(
            "/waybills/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_read(
        self,
        id: Annotated[
            StrictStr, Field(..., description="The ID of the waybill queried.")
        ],
        **kwargs
    ) -> ExternalAPIWaybillRetrieve:  # noqa: E501
        """Querying of a single waybill  # noqa: E501

        Returns a waybill with the specified ID. Only companies associated with the waybill can query it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_read(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill queried. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillRetrieve
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_read_with_http_info(
        self,
        id: Annotated[
            StrictStr, Field(..., description="The ID of the waybill queried.")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of a single waybill  # noqa: E501

        Returns a waybill with the specified ID. Only companies associated with the waybill can query it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill queried. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillRetrieve, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_read" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillRetrieve",
        }

        return self.api_client.call_api(
            "/waybills/{id}/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_refuse(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillRefuse,
        **kwargs
    ) -> ExternalAPIWaybillRefuse:  # noqa: E501
        """Refusing waybill  # noqa: E501

        Marks waybill as `refused` in destination and sets the status of waybill to in progress again.     If new destination is provided, then new destination is set for the waybill.     Only the transportation company or receiving company of the waybill are authorized to refuse the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_refuse(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillRefuse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillRefuse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_refuse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_refuse_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def waybills_refuse_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillRefuse,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Refusing waybill  # noqa: E501

        Marks waybill as `refused` in destination and sets the status of waybill to in progress again.     If new destination is provided, then new destination is set for the waybill.     Only the transportation company or receiving company of the waybill are authorized to refuse the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_refuse_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillRefuse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillRefuse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_refuse" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillRefuse",
        }

        return self.api_client.call_api(
            "/waybills/{id}/refuse/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_start_drive(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillStartDrive,
        **kwargs
    ) -> ExternalAPIWaybillStartDrive:  # noqa: E501
        """Starting driving  # noqa: E501

        Sets the status of a waybill to `in progress`. Waybill status has to be `created` to use this endpoint. Only     the transportation company or receiving company of the waybill are authorized to move waybill to `in     progress`.<br><br>     **NB!** Destination needs to belong to the receiving company in case the origin’s     `feature_waybill_destination_changing_disabled_for_drivers` flag is set to `True`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_start_drive(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillStartDrive
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillStartDrive
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_start_drive_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_start_drive_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_start_drive_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillStartDrive,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Starting driving  # noqa: E501

        Sets the status of a waybill to `in progress`. Waybill status has to be `created` to use this endpoint. Only     the transportation company or receiving company of the waybill are authorized to move waybill to `in     progress`.<br><br>     **NB!** Destination needs to belong to the receiving company in case the origin’s     `feature_waybill_destination_changing_disabled_for_drivers` flag is set to `True`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_start_drive_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillStartDrive
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillStartDrive, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_start_drive" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "201": "ExternalAPIWaybillStartDrive",
        }

        return self.api_client.call_api(
            "/waybills/{id}/start_drive/",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_update_accepted_amounts(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillAcceptedAmounts,
        **kwargs
    ) -> ExternalAPIWaybillAcceptedAmounts:  # noqa: E501
        """Updating of accepted amounts  # noqa: E501

        Sets the accepted amounts for the waybill. Authorized only for the receiving company of the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_update_accepted_amounts(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillAcceptedAmounts
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillAcceptedAmounts
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_update_accepted_amounts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_update_accepted_amounts_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_update_accepted_amounts_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillAcceptedAmounts,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Updating of accepted amounts  # noqa: E501

        Sets the accepted amounts for the waybill. Authorized only for the receiving company of the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_update_accepted_amounts_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillAcceptedAmounts
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillAcceptedAmounts, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_update_accepted_amounts" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillAcceptedAmounts",
        }

        return self.api_client.call_api(
            "/waybills/{id}/update_accepted_amounts/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_update_dispatched_amounts(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillDispatchedAmounts,
        **kwargs
    ) -> ExternalAPIWaybillDispatchedAmounts:  # noqa: E501
        """Updating of dispatched amounts  # noqa: E501

        Sets the dispatched amounts for the waybill. Authorized only for the origin company of the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_update_dispatched_amounts(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillDispatchedAmounts
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillDispatchedAmounts
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_update_dispatched_amounts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_update_dispatched_amounts_with_http_info(
            id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_update_dispatched_amounts_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        data: ExternalAPIWaybillDispatchedAmounts,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Updating of dispatched amounts  # noqa: E501

        Sets the dispatched amounts for the waybill. Authorized only for the origin company of the waybill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_update_dispatched_amounts_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param data: (required)
        :type data: ExternalAPIWaybillDispatchedAmounts
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillDispatchedAmounts, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_update_dispatched_amounts" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillDispatchedAmounts",
        }

        return self.api_client.call_api(
            "/waybills/{id}/update_dispatched_amounts/",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_vehicle_location_data(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        **kwargs
    ) -> ExternalAPIWaybillVehicleLocation:  # noqa: E501
        """Querying of vehicle location data  # noqa: E501

        Returns vehicle location data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_vehicle_location_data(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExternalAPIWaybillVehicleLocation
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_vehicle_location_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_vehicle_location_data_with_http_info(
            id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_vehicle_location_data_with_http_info(
        self,
        id: Annotated[StrictStr, Field(..., description="The ID of the waybill.")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Querying of vehicle location data  # noqa: E501

        Returns vehicle location data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_vehicle_location_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The ID of the waybill. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExternalAPIWaybillVehicleLocation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_vehicle_location_data" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["id"]:
            _path_params["id"] = _params["id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["API key"]  # noqa: E501

        _response_types_map = {
            "200": "ExternalAPIWaybillVehicleLocation",
        }

        return self.api_client.call_api(
            "/waybills/{id}/vehicle_location_data/",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
