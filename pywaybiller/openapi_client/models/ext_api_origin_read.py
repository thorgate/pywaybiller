# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    conlist,
    constr,
    validator,
)
from pywaybiller.openapi_client.models.ext_api_holding_base_read import (
    ExtAPIHoldingBaseRead,
)
from pywaybiller.openapi_client.models.ext_api_origin_assortment import (
    ExtAPIOriginAssortment,
)
from pywaybiller.openapi_client.models.geo_location import GeoLocation


class ExtAPIOriginRead(BaseModel):
    """
    ExtAPIOriginRead
    """

    id: Optional[StrictInt] = None
    name: constr(strict=True, max_length=255, min_length=1) = Field(...)
    location: GeoLocation = Field(...)
    assortments: conlist(ExtAPIOriginAssortment) = Field(...)
    partner_companies: Optional[conlist(StrictStr, unique_items=True)] = Field(
        None, description="List of registry codes of partner companies."
    )
    public: Optional[StrictBool] = False
    active: Optional[StrictBool] = True
    holding_base: Optional[ExtAPIHoldingBaseRead] = None
    cadaster_number: Optional[
        constr(strict=True, max_length=500, min_length=1)
    ] = Field(
        None,
        description="Cadaster number of the Origin in free form. Required if holding base is sent.",
    )
    extra_information: Optional[constr(strict=True, max_length=254)] = None
    representative_name: Optional[constr(strict=True, max_length=64)] = None
    representative_phone: Optional[constr(strict=True, max_length=128)] = None
    waybill_created_emails: Optional[
        conlist(constr(strict=True, min_length=1))
    ] = Field(
        None,
        description="E-mail addresses, where you want to receive notification when waybill is created.",
    )
    waybill_accepted_emails: Optional[
        conlist(constr(strict=True, min_length=1))
    ] = Field(
        None,
        description="E-mail addresses, where you want to receive notification when waybill is accepted.",
    )
    waybill_reached_destination_emails: Optional[
        conlist(constr(strict=True, min_length=1))
    ] = Field(
        None,
        description="E-mail addresses, where you want to receive notification when waybill has arrived at destination.",
    )
    waybill_created_emails_language: Optional[StrictStr] = ""
    waybill_accepted_emails_language: Optional[StrictStr] = ""
    waybill_reached_destination_emails_language: Optional[StrictStr] = ""
    feature_single_transport_order_per_truck: Optional[StrictBool] = Field(
        False,
        description="Managers are not allowed to create transport orders for a vehicle if there is an active transport order for the vehicle from this origin",
    )
    feature_waybill_dispatched_amounts_changing_disabled: Optional[StrictBool] = Field(
        False,
        description="Drivers and receivers are not allowed to change dispatched amounts for waybills from this origin",
    )
    feature_waybill_destination_changing_disabled_for_drivers: Optional[
        StrictBool
    ] = Field(
        False,
        description="Drivers are not allowed to change the destination of waybills from this origin",
    )
    company: Optional[StrictStr] = Field(
        None,
        description="Registry code of the owner company. By default, API KEY company is used. Note, origin company can not be changed",
    )
    __properties = [
        "id",
        "name",
        "location",
        "assortments",
        "partner_companies",
        "public",
        "active",
        "holding_base",
        "cadaster_number",
        "extra_information",
        "representative_name",
        "representative_phone",
        "waybill_created_emails",
        "waybill_accepted_emails",
        "waybill_reached_destination_emails",
        "waybill_created_emails_language",
        "waybill_accepted_emails_language",
        "waybill_reached_destination_emails_language",
        "feature_single_transport_order_per_truck",
        "feature_waybill_dispatched_amounts_changing_disabled",
        "feature_waybill_destination_changing_disabled_for_drivers",
        "company",
    ]

    @validator("waybill_created_emails_language")
    def waybill_created_emails_language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("", "et", "ru", "en", "fi", "nb"):
            raise ValueError(
                "must be one of enum values ('', 'et', 'ru', 'en', 'fi', 'nb')"
            )
        return value

    @validator("waybill_accepted_emails_language")
    def waybill_accepted_emails_language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("", "et", "ru", "en", "fi", "nb"):
            raise ValueError(
                "must be one of enum values ('', 'et', 'ru', 'en', 'fi', 'nb')"
            )
        return value

    @validator("waybill_reached_destination_emails_language")
    def waybill_reached_destination_emails_language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("", "et", "ru", "en", "fi", "nb"):
            raise ValueError(
                "must be one of enum values ('', 'et', 'ru', 'en', 'fi', 'nb')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtAPIOriginRead:
        """Create an instance of ExtAPIOriginRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "id",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict["location"] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assortments (list)
        _items = []
        if self.assortments:
            for _item in self.assortments:
                if _item:
                    _items.append(_item.to_dict())
            _dict["assortments"] = _items
        # override the default output from pydantic by calling `to_dict()` of holding_base
        if self.holding_base:
            _dict["holding_base"] = self.holding_base.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtAPIOriginRead:
        """Create an instance of ExtAPIOriginRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtAPIOriginRead.parse_obj(obj)

        _obj = ExtAPIOriginRead.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "location": GeoLocation.from_dict(obj.get("location"))
                if obj.get("location") is not None
                else None,
                "assortments": [
                    ExtAPIOriginAssortment.from_dict(_item)
                    for _item in obj.get("assortments")
                ]
                if obj.get("assortments") is not None
                else None,
                "partner_companies": obj.get("partner_companies"),
                "public": obj.get("public") if obj.get("public") is not None else False,
                "active": obj.get("active") if obj.get("active") is not None else True,
                "holding_base": ExtAPIHoldingBaseRead.from_dict(obj.get("holding_base"))
                if obj.get("holding_base") is not None
                else None,
                "cadaster_number": obj.get("cadaster_number"),
                "extra_information": obj.get("extra_information"),
                "representative_name": obj.get("representative_name"),
                "representative_phone": obj.get("representative_phone"),
                "waybill_created_emails": obj.get("waybill_created_emails"),
                "waybill_accepted_emails": obj.get("waybill_accepted_emails"),
                "waybill_reached_destination_emails": obj.get(
                    "waybill_reached_destination_emails"
                ),
                "waybill_created_emails_language": obj.get(
                    "waybill_created_emails_language"
                )
                if obj.get("waybill_created_emails_language") is not None
                else "",
                "waybill_accepted_emails_language": obj.get(
                    "waybill_accepted_emails_language"
                )
                if obj.get("waybill_accepted_emails_language") is not None
                else "",
                "waybill_reached_destination_emails_language": obj.get(
                    "waybill_reached_destination_emails_language"
                )
                if obj.get("waybill_reached_destination_emails_language") is not None
                else "",
                "feature_single_transport_order_per_truck": obj.get(
                    "feature_single_transport_order_per_truck"
                )
                if obj.get("feature_single_transport_order_per_truck") is not None
                else False,
                "feature_waybill_dispatched_amounts_changing_disabled": obj.get(
                    "feature_waybill_dispatched_amounts_changing_disabled"
                )
                if obj.get("feature_waybill_dispatched_amounts_changing_disabled")
                is not None
                else False,
                "feature_waybill_destination_changing_disabled_for_drivers": obj.get(
                    "feature_waybill_destination_changing_disabled_for_drivers"
                )
                if obj.get("feature_waybill_destination_changing_disabled_for_drivers")
                is not None
                else False,
                "company": obj.get("company"),
            }
        )
        return _obj
