# coding: utf-8

"""
Waybiller External API - with fixes

The **Waybiller External API** is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, the external API provides mapping support - it is possible to create company-specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during the creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, which may be null if the company doesn't have a mapping for this object.  Unique **Waybiller** identifiers and values can be accessed via the `raw_data` key.  The API is HTTPS and JSON based.  ### Pagination  By default, list endpoint responses are presented in pages of 30 items.  It is possible to control the page size using the `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>`, where `<number>` is an integer between 1 and 1000.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Annotated, Self

from pywaybiller.openapi_client.models.external_api_origin_assortment_raw_data import (
    ExternalAPIOriginAssortmentRawData,
)


class ExternalAPIOriginAssortment(BaseModel):
    """
    ExternalAPIOriginAssortment
    """  # noqa: E501

    id: StrictInt = Field(
        description="Unique identifier of the origin-assortment relationship"
    )
    origin: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    ] = Field(description="Name of the origin where the assortment is available")
    assortment: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    ] = Field(description="Name of the assortment")
    subset_type: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(
        description="Type of the assortment subset"
    )
    subset: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(
        description="Specific value within the subset type"
    )
    raw_data: Optional[ExternalAPIOriginAssortmentRawData] = Field(
        description="The IDs of the Waybiller internal objects"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "origin",
        "assortment",
        "subset_type",
        "subset",
        "raw_data",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalAPIOriginAssortment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "origin",
                "assortment",
                "subset_type",
                "subset",
                "raw_data",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of raw_data
        if self.raw_data:
            _dict["raw_data"] = self.raw_data.to_dict()
        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict["origin"] = None

        # set to None if assortment (nullable) is None
        # and model_fields_set contains the field
        if self.assortment is None and "assortment" in self.model_fields_set:
            _dict["assortment"] = None

        # set to None if subset_type (nullable) is None
        # and model_fields_set contains the field
        if self.subset_type is None and "subset_type" in self.model_fields_set:
            _dict["subset_type"] = None

        # set to None if subset (nullable) is None
        # and model_fields_set contains the field
        if self.subset is None and "subset" in self.model_fields_set:
            _dict["subset"] = None

        # set to None if raw_data (nullable) is None
        # and model_fields_set contains the field
        if self.raw_data is None and "raw_data" in self.model_fields_set:
            _dict["raw_data"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalAPIOriginAssortment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "origin": obj.get("origin"),
                "assortment": obj.get("assortment"),
                "subset_type": obj.get("subset_type"),
                "subset": obj.get("subset"),
                "raw_data": ExternalAPIOriginAssortmentRawData.from_dict(
                    obj["raw_data"]
                )
                if obj.get("raw_data") is not None
                else None,
            }
        )
        return _obj
