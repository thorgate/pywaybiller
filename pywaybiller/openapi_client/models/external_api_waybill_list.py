# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr
from pywaybiller.openapi_client.models.external_api_waybill_raw_data_list import (
    ExternalAPIWaybillRawDataList,
)
from pywaybiller.openapi_client.models.external_api_waybill_row_list import (
    ExternalAPIWaybillRowList,
)


class ExternalAPIWaybillList(BaseModel):
    """
    ExternalAPIWaybillList
    """

    waybill_id: Optional[constr(strict=True, min_length=1)] = Field(
        None,
        description="The external ID of the waybill. Usually `null` if waybill was created in Waybiller UI and not over Waybiller External API.",
    )
    destination_id: Optional[constr(strict=True, min_length=1)] = Field(
        None,
        description="The external ID of the destination. Usually `null` if waybill was created in Waybiller UI and not over Waybiller External API.",
    )
    dispatcher_timestamp: Optional[datetime] = Field(
        None, description="Veoselehe loomise aeg"
    )
    driver_timestamp: Optional[datetime] = Field(
        None, description="Hetk millal autojuht alustas sõitu"
    )
    destination_timestamp: Optional[datetime] = None
    confirmed_timestamp: Optional[datetime] = Field(
        None, description="Sihtkohas kinnitamise aeg"
    )
    cancelled_timestamp: Optional[datetime] = Field(
        None, description="Veoselehe tühistamise aeg"
    )
    status: Optional[StrictInt] = None
    number: Optional[constr(strict=True, min_length=1)] = None
    navision_bin_code: Optional[StrictStr] = Field(None, description="Bin code.")
    raw_data: Optional[ExternalAPIWaybillRawDataList] = None
    shipper_company_name: Optional[StrictStr] = Field(
        None, description="The name of the shipper company."
    )
    origin_name: Optional[StrictStr] = None
    origin_address: Optional[constr(strict=True, min_length=1)] = None
    transportation_company_name: Optional[StrictStr] = Field(
        None, description="The name of the transportation company."
    )
    truck_reg_number: Optional[StrictStr] = Field(
        None, description="The registration number of the vehicle."
    )
    trailer_reg_number: Optional[StrictStr] = Field(
        None, description="The registration number of the trailer."
    )
    receiver_company_name: Optional[StrictStr] = Field(
        None, description="The name of the receiving company."
    )
    receiver_company_reg_code: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="The registry code of the receiving company."
    )
    last_vehicle_location: Optional[Dict[str, Any]] = None
    destination_name: Optional[StrictStr] = Field(
        None, description="The name of the destination."
    )
    destination_address: Optional[StrictStr] = Field(
        None, description="The address of the destination."
    )
    dispatched_amount: Optional[StrictStr] = Field(
        None, description="The total dispatched amount."
    )
    rows: Optional[conlist(ExternalAPIWaybillRowList)] = Field(
        None, description="Waybill rows."
    )
    __properties = [
        "waybill_id",
        "destination_id",
        "dispatcher_timestamp",
        "driver_timestamp",
        "destination_timestamp",
        "confirmed_timestamp",
        "cancelled_timestamp",
        "status",
        "number",
        "navision_bin_code",
        "raw_data",
        "shipper_company_name",
        "origin_name",
        "origin_address",
        "transportation_company_name",
        "truck_reg_number",
        "trailer_reg_number",
        "receiver_company_name",
        "receiver_company_reg_code",
        "last_vehicle_location",
        "destination_name",
        "destination_address",
        "dispatched_amount",
        "rows",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalAPIWaybillList:
        """Create an instance of ExternalAPIWaybillList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "waybill_id",
                "destination_id",
                "dispatcher_timestamp",
                "driver_timestamp",
                "destination_timestamp",
                "confirmed_timestamp",
                "cancelled_timestamp",
                "status",
                "number",
                "navision_bin_code",
                "shipper_company_name",
                "origin_name",
                "origin_address",
                "transportation_company_name",
                "truck_reg_number",
                "trailer_reg_number",
                "receiver_company_name",
                "receiver_company_reg_code",
                "last_vehicle_location",
                "destination_name",
                "destination_address",
                "dispatched_amount",
                "rows",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of raw_data
        if self.raw_data:
            _dict["raw_data"] = self.raw_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item in self.rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["rows"] = _items
        # set to None if waybill_id (nullable) is None
        # and __fields_set__ contains the field
        if self.waybill_id is None and "waybill_id" in self.__fields_set__:
            _dict["waybill_id"] = None

        # set to None if destination_id (nullable) is None
        # and __fields_set__ contains the field
        if self.destination_id is None and "destination_id" in self.__fields_set__:
            _dict["destination_id"] = None

        # set to None if driver_timestamp (nullable) is None
        # and __fields_set__ contains the field
        if self.driver_timestamp is None and "driver_timestamp" in self.__fields_set__:
            _dict["driver_timestamp"] = None

        # set to None if destination_timestamp (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.destination_timestamp is None
            and "destination_timestamp" in self.__fields_set__
        ):
            _dict["destination_timestamp"] = None

        # set to None if confirmed_timestamp (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.confirmed_timestamp is None
            and "confirmed_timestamp" in self.__fields_set__
        ):
            _dict["confirmed_timestamp"] = None

        # set to None if cancelled_timestamp (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.cancelled_timestamp is None
            and "cancelled_timestamp" in self.__fields_set__
        ):
            _dict["cancelled_timestamp"] = None

        # set to None if navision_bin_code (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.navision_bin_code is None
            and "navision_bin_code" in self.__fields_set__
        ):
            _dict["navision_bin_code"] = None

        # set to None if last_vehicle_location (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.last_vehicle_location is None
            and "last_vehicle_location" in self.__fields_set__
        ):
            _dict["last_vehicle_location"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalAPIWaybillList:
        """Create an instance of ExternalAPIWaybillList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalAPIWaybillList.parse_obj(obj)

        _obj = ExternalAPIWaybillList.parse_obj(
            {
                "waybill_id": obj.get("waybill_id"),
                "destination_id": obj.get("destination_id"),
                "dispatcher_timestamp": obj.get("dispatcher_timestamp"),
                "driver_timestamp": obj.get("driver_timestamp"),
                "destination_timestamp": obj.get("destination_timestamp"),
                "confirmed_timestamp": obj.get("confirmed_timestamp"),
                "cancelled_timestamp": obj.get("cancelled_timestamp"),
                "status": obj.get("status"),
                "number": obj.get("number"),
                "navision_bin_code": obj.get("navision_bin_code"),
                "raw_data": ExternalAPIWaybillRawDataList.from_dict(obj.get("raw_data"))
                if obj.get("raw_data") is not None
                else None,
                "shipper_company_name": obj.get("shipper_company_name"),
                "origin_name": obj.get("origin_name"),
                "origin_address": obj.get("origin_address"),
                "transportation_company_name": obj.get("transportation_company_name"),
                "truck_reg_number": obj.get("truck_reg_number"),
                "trailer_reg_number": obj.get("trailer_reg_number"),
                "receiver_company_name": obj.get("receiver_company_name"),
                "receiver_company_reg_code": obj.get("receiver_company_reg_code"),
                "last_vehicle_location": obj.get("last_vehicle_location"),
                "destination_name": obj.get("destination_name"),
                "destination_address": obj.get("destination_address"),
                "dispatched_amount": obj.get("dispatched_amount"),
                "rows": [
                    ExternalAPIWaybillRowList.from_dict(_item)
                    for _item in obj.get("rows")
                ]
                if obj.get("rows") is not None
                else None,
            }
        )
        return _obj
