# coding: utf-8

"""
Waybiller External API - with fixes

The **Waybiller External API** is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, the external API provides mapping support - it is possible to create company-specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during the creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, which may be null if the company doesn't have a mapping for this object.  Unique **Waybiller** identifiers and values can be accessed via the `raw_data` key.  The API is HTTPS and JSON based.  ### Pagination  By default, list endpoint responses are presented in pages of 30 items.  It is possible to control the page size using the `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>`, where `<number>` is an integer between 1 and 1000.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated, Self


class ExternalAPITransportOrderUpdate(BaseModel):
    """
    ExternalAPITransportOrderUpdate
    """  # noqa: E501

    pallets_number: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None
    origin_id: Optional[StrictInt] = None
    origin_raw_id: Optional[StrictStr] = None
    origin_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    origin_address: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    origin_latitude: Optional[Union[StrictFloat, StrictInt]] = None
    origin_longitude: Optional[Union[StrictFloat, StrictInt]] = None
    shipper_company_name: Optional[
        Annotated[str, Field(strict=True, max_length=64)]
    ] = None
    shipper_company_reg_code: Optional[
        Annotated[str, Field(strict=True, max_length=16)]
    ] = None
    destination_id: Optional[StrictInt] = None
    destination_raw_id: Optional[StrictStr] = None
    destination_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = (
        None
    )
    destination_address: Optional[
        Annotated[str, Field(strict=True, max_length=255)]
    ] = None
    destination_latitude: Optional[Union[StrictFloat, StrictInt]] = None
    destination_longitude: Optional[Union[StrictFloat, StrictInt]] = None
    receiver_company_name: Optional[
        Annotated[str, Field(strict=True, max_length=64)]
    ] = None
    receiver_company_reg_code: Optional[
        Annotated[str, Field(strict=True, max_length=16)]
    ] = None
    truck_reg_number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = None
    trailer_reg_number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = (
        None
    )
    __properties: ClassVar[List[str]] = [
        "pallets_number",
        "origin_id",
        "origin_raw_id",
        "origin_name",
        "origin_address",
        "origin_latitude",
        "origin_longitude",
        "shipper_company_name",
        "shipper_company_reg_code",
        "destination_id",
        "destination_raw_id",
        "destination_name",
        "destination_address",
        "destination_latitude",
        "destination_longitude",
        "receiver_company_name",
        "receiver_company_reg_code",
        "truck_reg_number",
        "trailer_reg_number",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if pallets_number (nullable) is None
        # and model_fields_set contains the field
        if self.pallets_number is None and "pallets_number" in self.model_fields_set:
            _dict["pallets_number"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "pallets_number": obj.get("pallets_number"),
                "origin_id": obj.get("origin_id"),
                "origin_raw_id": obj.get("origin_raw_id"),
                "origin_name": obj.get("origin_name"),
                "origin_address": obj.get("origin_address"),
                "origin_latitude": obj.get("origin_latitude"),
                "origin_longitude": obj.get("origin_longitude"),
                "shipper_company_name": obj.get("shipper_company_name"),
                "shipper_company_reg_code": obj.get("shipper_company_reg_code"),
                "destination_id": obj.get("destination_id"),
                "destination_raw_id": obj.get("destination_raw_id"),
                "destination_name": obj.get("destination_name"),
                "destination_address": obj.get("destination_address"),
                "destination_latitude": obj.get("destination_latitude"),
                "destination_longitude": obj.get("destination_longitude"),
                "receiver_company_name": obj.get("receiver_company_name"),
                "receiver_company_reg_code": obj.get("receiver_company_reg_code"),
                "truck_reg_number": obj.get("truck_reg_number"),
                "trailer_reg_number": obj.get("trailer_reg_number"),
            }
        )
        return _obj
