# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conint,
    conlist,
    constr,
    validator,
)
from pywaybiller.openapi_client.models.external_api_transport_order_raw_data import (
    ExternalAPITransportOrderRawData,
)
from pywaybiller.openapi_client.models.external_api_transport_order_row import (
    ExternalAPITransportOrderRow,
)


class ExternalAPITransportOrder(BaseModel):
    """
    ExternalAPITransportOrder
    """

    transport_order_id: constr(strict=True, min_length=1) = Field(...)
    order_raw_id: Optional[constr(strict=True, min_length=1)] = None
    order_id: Optional[constr(strict=True, min_length=1)] = None
    number: Optional[constr(strict=True, min_length=1)] = None
    status: Optional[StrictStr] = None
    rows: conlist(ExternalAPITransportOrderRow) = Field(...)
    organizer_user_id: StrictInt = Field(...)
    destination_raw_id: Optional[constr(strict=True, min_length=1)] = None
    destination_id: Optional[StrictInt] = None
    destination_name: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    destination_address: Optional[
        constr(strict=True, max_length=255, min_length=1)
    ] = None
    destination_latitude: Optional[Union[StrictFloat, StrictInt]] = None
    destination_longitude: Optional[Union[StrictFloat, StrictInt]] = None
    destination_waybill_reached_destination_emails: Optional[
        conlist(constr(strict=True, max_length=254, min_length=1))
    ] = None
    destination_waybill_accepted_emails: Optional[
        conlist(constr(strict=True, max_length=254, min_length=1))
    ] = None
    receiver_company_name: Optional[
        constr(strict=True, max_length=64, min_length=1)
    ] = None
    receiver_company_reg_code: Optional[
        constr(strict=True, max_length=16, min_length=1)
    ] = None
    origin_raw_id: Optional[constr(strict=True, min_length=1)] = None
    origin_id: Optional[StrictInt] = None
    origin_name: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    origin_address: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    origin_latitude: Optional[Union[StrictFloat, StrictInt]] = None
    origin_longitude: Optional[Union[StrictFloat, StrictInt]] = None
    origin_waybill_reached_destination_emails: Optional[
        conlist(constr(strict=True, max_length=254, min_length=1))
    ] = None
    origin_waybill_accepted_emails: Optional[
        conlist(constr(strict=True, max_length=254, min_length=1))
    ] = None
    shipper_company_name: Optional[
        constr(strict=True, max_length=64, min_length=1)
    ] = None
    shipper_company_reg_code: Optional[
        constr(strict=True, max_length=16, min_length=1)
    ] = None
    transportation_company_name: Optional[
        constr(strict=True, max_length=64, min_length=1)
    ] = None
    transportation_company_reg_code: Optional[
        constr(strict=True, max_length=16, min_length=1)
    ] = None
    truck_reg_number: Optional[constr(strict=True, max_length=16, min_length=1)] = None
    trailer_reg_number: Optional[constr(strict=True, max_length=16)] = None
    driver_email: Optional[constr(strict=True, max_length=254, min_length=1)] = None
    driver_personal_code: Optional[constr(strict=True, max_length=24)] = None
    driver_name: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    driver_phone: Optional[constr(strict=True, max_length=128)] = ""
    transport_date: date = Field(...)
    transport_time: Optional[StrictStr] = None
    additional_info: Optional[StrictStr] = None
    waybills_ids: Optional[conlist(StrictInt, unique_items=True)] = None
    waybill_pdf_urls: Optional[StrictStr] = None
    raw_data: Optional[ExternalAPITransportOrderRawData] = None
    pallets_number: Optional[conint(strict=True, le=32767, ge=0)] = None
    __properties = [
        "transport_order_id",
        "order_raw_id",
        "order_id",
        "number",
        "status",
        "rows",
        "organizer_user_id",
        "destination_raw_id",
        "destination_id",
        "destination_name",
        "destination_address",
        "destination_latitude",
        "destination_longitude",
        "destination_waybill_reached_destination_emails",
        "destination_waybill_accepted_emails",
        "receiver_company_name",
        "receiver_company_reg_code",
        "origin_raw_id",
        "origin_id",
        "origin_name",
        "origin_address",
        "origin_latitude",
        "origin_longitude",
        "origin_waybill_reached_destination_emails",
        "origin_waybill_accepted_emails",
        "shipper_company_name",
        "shipper_company_reg_code",
        "transportation_company_name",
        "transportation_company_reg_code",
        "truck_reg_number",
        "trailer_reg_number",
        "driver_email",
        "driver_personal_code",
        "driver_name",
        "driver_phone",
        "transport_date",
        "transport_time",
        "additional_info",
        "waybills_ids",
        "waybill_pdf_urls",
        "raw_data",
        "pallets_number",
    ]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "draft",
            "new",
            "approaching_origin",
            "approaching_destination",
            "in_destination",
            "accepted",
            "cancelled",
        ):
            raise ValueError(
                "must be one of enum values ('draft', 'new', 'approaching_origin', 'approaching_destination', 'in_destination', 'accepted', 'cancelled')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalAPITransportOrder:
        """Create an instance of ExternalAPITransportOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "number",
                "status",
                "waybills_ids",
                "waybill_pdf_urls",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item in self.rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["rows"] = _items
        # override the default output from pydantic by calling `to_dict()` of raw_data
        if self.raw_data:
            _dict["raw_data"] = self.raw_data.to_dict()
        # set to None if number (nullable) is None
        # and __fields_set__ contains the field
        if self.number is None and "number" in self.__fields_set__:
            _dict["number"] = None

        # set to None if destination_waybill_reached_destination_emails (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.destination_waybill_reached_destination_emails is None
            and "destination_waybill_reached_destination_emails" in self.__fields_set__
        ):
            _dict["destination_waybill_reached_destination_emails"] = None

        # set to None if destination_waybill_accepted_emails (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.destination_waybill_accepted_emails is None
            and "destination_waybill_accepted_emails" in self.__fields_set__
        ):
            _dict["destination_waybill_accepted_emails"] = None

        # set to None if origin_waybill_reached_destination_emails (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.origin_waybill_reached_destination_emails is None
            and "origin_waybill_reached_destination_emails" in self.__fields_set__
        ):
            _dict["origin_waybill_reached_destination_emails"] = None

        # set to None if origin_waybill_accepted_emails (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.origin_waybill_accepted_emails is None
            and "origin_waybill_accepted_emails" in self.__fields_set__
        ):
            _dict["origin_waybill_accepted_emails"] = None

        # set to None if transport_time (nullable) is None
        # and __fields_set__ contains the field
        if self.transport_time is None and "transport_time" in self.__fields_set__:
            _dict["transport_time"] = None

        # set to None if pallets_number (nullable) is None
        # and __fields_set__ contains the field
        if self.pallets_number is None and "pallets_number" in self.__fields_set__:
            _dict["pallets_number"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalAPITransportOrder:
        """Create an instance of ExternalAPITransportOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalAPITransportOrder.parse_obj(obj)

        _obj = ExternalAPITransportOrder.parse_obj(
            {
                "transport_order_id": obj.get("transport_order_id"),
                "order_raw_id": obj.get("order_raw_id"),
                "order_id": obj.get("order_id"),
                "number": obj.get("number"),
                "status": obj.get("status"),
                "rows": [
                    ExternalAPITransportOrderRow.from_dict(_item)
                    for _item in obj.get("rows")
                ]
                if obj.get("rows") is not None
                else None,
                "organizer_user_id": obj.get("organizer_user_id"),
                "destination_raw_id": obj.get("destination_raw_id"),
                "destination_id": obj.get("destination_id"),
                "destination_name": obj.get("destination_name"),
                "destination_address": obj.get("destination_address"),
                "destination_latitude": obj.get("destination_latitude"),
                "destination_longitude": obj.get("destination_longitude"),
                "destination_waybill_reached_destination_emails": obj.get(
                    "destination_waybill_reached_destination_emails"
                ),
                "destination_waybill_accepted_emails": obj.get(
                    "destination_waybill_accepted_emails"
                ),
                "receiver_company_name": obj.get("receiver_company_name"),
                "receiver_company_reg_code": obj.get("receiver_company_reg_code"),
                "origin_raw_id": obj.get("origin_raw_id"),
                "origin_id": obj.get("origin_id"),
                "origin_name": obj.get("origin_name"),
                "origin_address": obj.get("origin_address"),
                "origin_latitude": obj.get("origin_latitude"),
                "origin_longitude": obj.get("origin_longitude"),
                "origin_waybill_reached_destination_emails": obj.get(
                    "origin_waybill_reached_destination_emails"
                ),
                "origin_waybill_accepted_emails": obj.get(
                    "origin_waybill_accepted_emails"
                ),
                "shipper_company_name": obj.get("shipper_company_name"),
                "shipper_company_reg_code": obj.get("shipper_company_reg_code"),
                "transportation_company_name": obj.get("transportation_company_name"),
                "transportation_company_reg_code": obj.get(
                    "transportation_company_reg_code"
                ),
                "truck_reg_number": obj.get("truck_reg_number"),
                "trailer_reg_number": obj.get("trailer_reg_number"),
                "driver_email": obj.get("driver_email"),
                "driver_personal_code": obj.get("driver_personal_code"),
                "driver_name": obj.get("driver_name"),
                "driver_phone": obj.get("driver_phone")
                if obj.get("driver_phone") is not None
                else "",
                "transport_date": obj.get("transport_date"),
                "transport_time": obj.get("transport_time"),
                "additional_info": obj.get("additional_info"),
                "waybills_ids": obj.get("waybills_ids"),
                "waybill_pdf_urls": obj.get("waybill_pdf_urls"),
                "raw_data": ExternalAPITransportOrderRawData.from_dict(
                    obj.get("raw_data")
                )
                if obj.get("raw_data") is not None
                else None,
                "pallets_number": obj.get("pallets_number"),
            }
        )
        return _obj
