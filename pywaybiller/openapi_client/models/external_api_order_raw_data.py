# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist, constr


class ExternalAPIOrderRawData(BaseModel):
    """
    Raw values in Waybiller.  # noqa: E501
    """

    order_id: StrictInt = Field(..., description="Order raw id.")
    number: constr(strict=True, min_length=1) = Field(..., description="Order number.")
    status: StrictInt = Field(
        ...,
        description="The number representing the status of the order. 1 - Mustand, 2 - Aktiivne, 3 - Mitteaktiivne, 4 - Arhiveeritud",
    )
    origins: Optional[conlist(StrictInt, unique_items=True)] = Field(
        None, description="L채htekohad, mille jaoks see tellimus loodud on."
    )
    owner_company_id: constr(strict=True, min_length=1) = Field(
        ..., description="Owner company raw id."
    )
    client_id: constr(strict=True, min_length=1) = Field(
        ..., description="Client company raw id."
    )
    origins_assortment: Optional[conlist(StrictInt, unique_items=True)] = Field(
        None, description="The assortment that can be grabbed by an order's executor."
    )
    transportation_companies: Optional[conlist(StrictInt, unique_items=True)] = Field(
        None,
        description="Veofirmad, mida tellimuse klient kasutab vedude jaoks l채htekohtadest sihtkohta.",
    )
    vehicles: Optional[conlist(StrictInt, unique_items=True)] = Field(
        None, description="Veokid, kes v천ivad selle tellimuse alusel vedusid teostada."
    )
    destination: Optional[StrictInt] = Field(
        None,
        description="Sihtkoht, kuhu selle tellimuse alusel on v천imalik vedusid teostada.",
    )
    __properties = [
        "order_id",
        "number",
        "status",
        "origins",
        "owner_company_id",
        "client_id",
        "origins_assortment",
        "transportation_companies",
        "vehicles",
        "destination",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalAPIOrderRawData:
        """Create an instance of ExternalAPIOrderRawData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "origins",
                "origins_assortment",
                "transportation_companies",
                "vehicles",
                "destination",
            },
            exclude_none=True,
        )
        # set to None if destination (nullable) is None
        # and __fields_set__ contains the field
        if self.destination is None and "destination" in self.__fields_set__:
            _dict["destination"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalAPIOrderRawData:
        """Create an instance of ExternalAPIOrderRawData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalAPIOrderRawData.parse_obj(obj)

        _obj = ExternalAPIOrderRawData.parse_obj(
            {
                "order_id": obj.get("order_id"),
                "number": obj.get("number"),
                "status": obj.get("status"),
                "origins": obj.get("origins"),
                "owner_company_id": obj.get("owner_company_id"),
                "client_id": obj.get("client_id"),
                "origins_assortment": obj.get("origins_assortment"),
                "transportation_companies": obj.get("transportation_companies"),
                "vehicles": obj.get("vehicles"),
                "destination": obj.get("destination"),
            }
        )
        return _obj
