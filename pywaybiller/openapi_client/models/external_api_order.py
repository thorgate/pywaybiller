# coding: utf-8

"""
    Waybiller External API

     **Waybiller** external API is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, external API features mapping support - it is possible to create company specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, that may be null if company doesn't have mapping for this object.  **Waybiller** unique identifiers and values can be accessed through `raw_data` key.  API is HTTPS and JSON based.  # Pagination  By default, results of list endpoints are presented with pages of 30 items.  It is possible to control the page size with `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>` where `<number>` is an integer between 1 and 1000. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    constr,
)
from pywaybiller.openapi_client.models.external_api_order_origin import (
    ExternalAPIOrderOrigin,
)
from pywaybiller.openapi_client.models.external_api_order_origins_assortments import (
    ExternalAPIOrderOriginsAssortments,
)
from pywaybiller.openapi_client.models.external_api_order_raw_data import (
    ExternalAPIOrderRawData,
)
from pywaybiller.openapi_client.models.external_api_order_transport_companies import (
    ExternalAPIOrderTransportCompanies,
)
from pywaybiller.openapi_client.models.external_api_order_vehicles import (
    ExternalAPIOrderVehicles,
)


class ExternalAPIOrder(BaseModel):
    """
    ExternalAPIOrder
    """

    number: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Order number."
    )
    status: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="The status of the order."
    )
    order_id: constr(strict=True, min_length=1) = Field(
        ..., description="Order id (in your system)."
    )
    order_raw_id: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Order raw id."
    )
    period: conlist(date) = Field(
        ..., description="The date range when the order is active."
    )
    owner_raw_id: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Raw id of the owner company."
    )
    owner_company_name: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Name of the company who owns the order."
    )
    client_id: Optional[constr(strict=True, min_length=1)] = Field(
        None,
        description="The company id (in your system) for whom the order is created for.",
    )
    client_company_reg_code: Optional[constr(strict=True, min_length=1)] = Field(
        None,
        description="The company reg code for whom the order is created for. Used as raw id to match the company, if it exists.",
    )
    client_company_name: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Name of the company for whom the order is created for."
    )
    destination_raw_id: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Destination raw id."
    )
    destination_id: Optional[StrictInt] = Field(
        None, description="Destination id (in your system)."
    )
    destination_name: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Destination name."
    )
    destination_address: Optional[
        constr(strict=True, max_length=255, min_length=1)
    ] = Field(None, description="Destination address.")
    destination_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="Destination location - latitude."
    )
    destination_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="Destination location - longitude."
    )
    origins: Optional[conlist(ExternalAPIOrderOrigin)] = Field(
        None, description="The origins for which the order is created for."
    )
    total_allowed_amount: Optional[StrictStr] = Field(
        None, description="Total allowed amount in tonnes."
    )
    rows: Optional[conlist(ExternalAPIOrderOriginsAssortments)] = Field(
        None, description="Origin's assortments."
    )
    transportation_companies: Optional[
        conlist(ExternalAPIOrderTransportCompanies)
    ] = Field(
        None,
        description="The transportation companies the client is using for transporting assortments from origins to destination.",
    )
    client_can_edit_transportation_values: Optional[StrictBool] = Field(
        None, description="Client can edit transportation values."
    )
    vehicles: Optional[conlist(ExternalAPIOrderVehicles)] = Field(
        None,
        description="The vehicles that the transportation companies are allowed to use for this order.",
    )
    extra_information: Optional[constr(strict=True, min_length=1)] = Field(
        None, description="Extra information."
    )
    user_id: StrictInt = Field(..., description="User who created this order.")
    raw_data: Optional[ExternalAPIOrderRawData] = None
    __properties = [
        "number",
        "status",
        "order_id",
        "order_raw_id",
        "period",
        "owner_raw_id",
        "owner_company_name",
        "client_id",
        "client_company_reg_code",
        "client_company_name",
        "destination_raw_id",
        "destination_id",
        "destination_name",
        "destination_address",
        "destination_latitude",
        "destination_longitude",
        "origins",
        "total_allowed_amount",
        "rows",
        "transportation_companies",
        "client_can_edit_transportation_values",
        "vehicles",
        "extra_information",
        "user_id",
        "raw_data",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalAPIOrder:
        """Create an instance of ExternalAPIOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "number",
                "status",
                "order_raw_id",
                "owner_raw_id",
                "owner_company_name",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in origins (list)
        _items = []
        if self.origins:
            for _item in self.origins:
                if _item:
                    _items.append(_item.to_dict())
            _dict["origins"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item in self.rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["rows"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transportation_companies (list)
        _items = []
        if self.transportation_companies:
            for _item in self.transportation_companies:
                if _item:
                    _items.append(_item.to_dict())
            _dict["transportation_companies"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vehicles (list)
        _items = []
        if self.vehicles:
            for _item in self.vehicles:
                if _item:
                    _items.append(_item.to_dict())
            _dict["vehicles"] = _items
        # override the default output from pydantic by calling `to_dict()` of raw_data
        if self.raw_data:
            _dict["raw_data"] = self.raw_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalAPIOrder:
        """Create an instance of ExternalAPIOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalAPIOrder.parse_obj(obj)

        _obj = ExternalAPIOrder.parse_obj(
            {
                "number": obj.get("number"),
                "status": obj.get("status"),
                "order_id": obj.get("order_id"),
                "order_raw_id": obj.get("order_raw_id"),
                "period": obj.get("period"),
                "owner_raw_id": obj.get("owner_raw_id"),
                "owner_company_name": obj.get("owner_company_name"),
                "client_id": obj.get("client_id"),
                "client_company_reg_code": obj.get("client_company_reg_code"),
                "client_company_name": obj.get("client_company_name"),
                "destination_raw_id": obj.get("destination_raw_id"),
                "destination_id": obj.get("destination_id"),
                "destination_name": obj.get("destination_name"),
                "destination_address": obj.get("destination_address"),
                "destination_latitude": obj.get("destination_latitude"),
                "destination_longitude": obj.get("destination_longitude"),
                "origins": [
                    ExternalAPIOrderOrigin.from_dict(_item)
                    for _item in obj.get("origins")
                ]
                if obj.get("origins") is not None
                else None,
                "total_allowed_amount": obj.get("total_allowed_amount"),
                "rows": [
                    ExternalAPIOrderOriginsAssortments.from_dict(_item)
                    for _item in obj.get("rows")
                ]
                if obj.get("rows") is not None
                else None,
                "transportation_companies": [
                    ExternalAPIOrderTransportCompanies.from_dict(_item)
                    for _item in obj.get("transportation_companies")
                ]
                if obj.get("transportation_companies") is not None
                else None,
                "client_can_edit_transportation_values": obj.get(
                    "client_can_edit_transportation_values"
                ),
                "vehicles": [
                    ExternalAPIOrderVehicles.from_dict(_item)
                    for _item in obj.get("vehicles")
                ]
                if obj.get("vehicles") is not None
                else None,
                "extra_information": obj.get("extra_information"),
                "user_id": obj.get("user_id"),
                "raw_data": ExternalAPIOrderRawData.from_dict(obj.get("raw_data"))
                if obj.get("raw_data") is not None
                else None,
            }
        )
        return _obj
